Index.PACKAGES = {"cloudflow" : [], "cloudflow.spark.kafka" : [{"name" : "cloudflow.spark.kafka.EncodedKV", "shortDescription" : "", "members_case class" : [{"member" : "cloudflow.spark.kafka.EncodedKV#<init>", "error" : "unsupported entity"}, {"label" : "value", "tail" : ": Array[Byte]", "member" : "cloudflow.spark.kafka.EncodedKV.value", "link" : "cloudflow\/spark\/kafka\/EncodedKV.html#value:Array[Byte]", "kind" : "val"}, {"label" : "key", "tail" : ": Array[Byte]", "member" : "cloudflow.spark.kafka.EncodedKV.key", "link" : "cloudflow\/spark\/kafka\/EncodedKV.html#key:Array[Byte]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cloudflow\/spark\/kafka\/EncodedKV.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cloudflow\/spark\/kafka\/EncodedKV.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cloudflow\/spark\/kafka\/EncodedKV.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cloudflow\/spark\/kafka\/EncodedKV.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cloudflow\/spark\/kafka\/EncodedKV.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cloudflow\/spark\/kafka\/EncodedKV.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cloudflow\/spark\/kafka\/EncodedKV.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cloudflow\/spark\/kafka\/EncodedKV.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cloudflow\/spark\/kafka\/EncodedKV.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cloudflow\/spark\/kafka\/EncodedKV.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cloudflow\/spark\/kafka\/EncodedKV.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cloudflow\/spark\/kafka\/EncodedKV.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cloudflow\/spark\/kafka\/EncodedKV.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "cloudflow\/spark\/kafka\/EncodedKV.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cloudflow\/spark\/kafka\/EncodedKV.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cloudflow\/spark\/kafka\/EncodedKV.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "cloudflow\/spark\/kafka\/EncodedKV.html", "kind" : "case class"}, {"name" : "cloudflow.spark.kafka.SparkStreamletContextImpl", "shortDescription" : "", "members_class" : [{"label" : "MountedPathUnavailableException", "tail" : "", "member" : "cloudflow.streamlets.StreamletContext.MountedPathUnavailableException", "link" : "cloudflow\/spark\/kafka\/SparkStreamletContextImpl.html#MountedPathUnavailableExceptionextendsExceptionwithProductwithSerializable", "kind" : "case class"}, {"label" : "checkpointDir", "tail" : "(dirName: String): String", "member" : "cloudflow.spark.kafka.SparkStreamletContextImpl.checkpointDir", "link" : "cloudflow\/spark\/kafka\/SparkStreamletContextImpl.html#checkpointDir(dirName:String):String", "kind" : "def"}, {"label" : "writeStream", "tail" : "(stream: Dataset[Out], outPort: CodecOutlet[Out], outputMode: OutputMode, optionalTrigger: Option[Trigger])(encoder: Encoder[Out], typeTag: scala.reflect.api.JavaUniverse.TypeTag[Out]): StreamingQuery", "member" : "cloudflow.spark.kafka.SparkStreamletContextImpl.writeStream", "link" : "cloudflow\/spark\/kafka\/SparkStreamletContextImpl.html#writeStream[Out](stream:org.apache.spark.sql.Dataset[Out],outPort:cloudflow.streamlets.CodecOutlet[Out],outputMode:org.apache.spark.sql.streaming.OutputMode,optionalTrigger:Option[org.apache.spark.sql.streaming.Trigger])(implicitencoder:org.apache.spark.sql.Encoder[Out],implicittypeTag:reflect.runtime.universe.TypeTag[Out]):org.apache.spark.sql.streaming.StreamingQuery", "kind" : "def"}, {"label" : "readStream", "tail" : "(inPort: CodecInlet[In])(encoder: Encoder[In], typeTag: scala.reflect.api.JavaUniverse.TypeTag[In]): Dataset[In]", "member" : "cloudflow.spark.kafka.SparkStreamletContextImpl.readStream", "link" : "cloudflow\/spark\/kafka\/SparkStreamletContextImpl.html#readStream[In](inPort:cloudflow.streamlets.CodecInlet[In])(implicitencoder:org.apache.spark.sql.Encoder[In],implicittypeTag:reflect.runtime.universe.TypeTag[In]):org.apache.spark.sql.Dataset[In]", "kind" : "def"}, {"label" : "maxOffsetsPerTrigger", "tail" : ": Long", "member" : "cloudflow.spark.kafka.SparkStreamletContextImpl.maxOffsetsPerTrigger", "link" : "cloudflow\/spark\/kafka\/SparkStreamletContextImpl.html#maxOffsetsPerTrigger:Long", "kind" : "val"}, {"label" : "storageDir", "tail" : ": String", "member" : "cloudflow.spark.kafka.SparkStreamletContextImpl.storageDir", "link" : "cloudflow\/spark\/kafka\/SparkStreamletContextImpl.html#storageDir:String", "kind" : "val"}, {"member" : "cloudflow.spark.kafka.SparkStreamletContextImpl#<init>", "error" : "unsupported entity"}, {"label" : "config", "tail" : ": Config", "member" : "cloudflow.spark.kafka.SparkStreamletContextImpl.config", "link" : "cloudflow\/spark\/kafka\/SparkStreamletContextImpl.html#config:com.typesafe.config.Config", "kind" : "val"}, {"label" : "session", "tail" : ": SparkSession", "member" : "cloudflow.spark.SparkStreamletContext.session", "link" : "cloudflow\/spark\/kafka\/SparkStreamletContextImpl.html#session:org.apache.spark.sql.SparkSession", "kind" : "val"}, {"label" : "getMountedPath", "tail" : "(volumeMount: VolumeMount): Path", "member" : "cloudflow.streamlets.StreamletContext.getMountedPath", "link" : "cloudflow\/spark\/kafka\/SparkStreamletContextImpl.html#getMountedPath(volumeMount:cloudflow.streamlets.VolumeMount):java.nio.file.Path", "kind" : "def"}, {"label" : "streamletConfig", "tail" : "(): Config", "member" : "cloudflow.streamlets.StreamletContext.streamletConfig", "link" : "cloudflow\/spark\/kafka\/SparkStreamletContextImpl.html#streamletConfig:com.typesafe.config.Config", "kind" : "final def"}, {"label" : "runtimeBootstrapServers", "tail" : "(topic: Topic): String", "member" : "cloudflow.streamlets.StreamletContext.runtimeBootstrapServers", "link" : "cloudflow\/spark\/kafka\/SparkStreamletContextImpl.html#runtimeBootstrapServers(topic:cloudflow.streamlets.Topic):String", "kind" : "def"}, {"label" : "findTopicForPort", "tail" : "(port: StreamletPort): Topic", "member" : "cloudflow.streamlets.StreamletContext.findTopicForPort", "link" : "cloudflow\/spark\/kafka\/SparkStreamletContextImpl.html#findTopicForPort(port:cloudflow.streamlets.StreamletPort):cloudflow.streamlets.Topic", "kind" : "def"}, {"label" : "streamletRef", "tail" : "(): String", "member" : "cloudflow.streamlets.StreamletContext.streamletRef", "link" : "cloudflow\/spark\/kafka\/SparkStreamletContextImpl.html#streamletRef:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cloudflow\/spark\/kafka\/SparkStreamletContextImpl.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cloudflow\/spark\/kafka\/SparkStreamletContextImpl.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cloudflow\/spark\/kafka\/SparkStreamletContextImpl.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cloudflow\/spark\/kafka\/SparkStreamletContextImpl.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cloudflow\/spark\/kafka\/SparkStreamletContextImpl.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cloudflow\/spark\/kafka\/SparkStreamletContextImpl.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cloudflow\/spark\/kafka\/SparkStreamletContextImpl.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cloudflow\/spark\/kafka\/SparkStreamletContextImpl.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cloudflow\/spark\/kafka\/SparkStreamletContextImpl.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cloudflow\/spark\/kafka\/SparkStreamletContextImpl.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cloudflow\/spark\/kafka\/SparkStreamletContextImpl.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cloudflow\/spark\/kafka\/SparkStreamletContextImpl.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cloudflow\/spark\/kafka\/SparkStreamletContextImpl.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "cloudflow\/spark\/kafka\/SparkStreamletContextImpl.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cloudflow\/spark\/kafka\/SparkStreamletContextImpl.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cloudflow\/spark\/kafka\/SparkStreamletContextImpl.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "cloudflow\/spark\/kafka\/SparkStreamletContextImpl.html", "kind" : "class"}], "cloudflow.spark.sql" : [{"name" : "cloudflow.spark.sql.LowPrioritySQLImplicits", "members_trait" : [{"label" : "newProductEncoder", "tail" : "(arg0: scala.reflect.api.JavaUniverse.TypeTag[T]): Encoder[T]", "member" : "cloudflow.spark.sql.LowPrioritySQLImplicits.newProductEncoder", "link" : "cloudflow\/spark\/sql\/LowPrioritySQLImplicits.html#newProductEncoder[T<:Product](implicitevidence$6:reflect.runtime.universe.TypeTag[T]):org.apache.spark.sql.Encoder[T]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cloudflow\/spark\/sql\/LowPrioritySQLImplicits.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cloudflow\/spark\/sql\/LowPrioritySQLImplicits.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cloudflow\/spark\/sql\/LowPrioritySQLImplicits.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cloudflow\/spark\/sql\/LowPrioritySQLImplicits.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cloudflow\/spark\/sql\/LowPrioritySQLImplicits.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cloudflow\/spark\/sql\/LowPrioritySQLImplicits.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cloudflow\/spark\/sql\/LowPrioritySQLImplicits.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cloudflow\/spark\/sql\/LowPrioritySQLImplicits.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cloudflow\/spark\/sql\/LowPrioritySQLImplicits.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cloudflow\/spark\/sql\/LowPrioritySQLImplicits.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cloudflow\/spark\/sql\/LowPrioritySQLImplicits.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cloudflow\/spark\/sql\/LowPrioritySQLImplicits.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cloudflow\/spark\/sql\/LowPrioritySQLImplicits.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cloudflow\/spark\/sql\/LowPrioritySQLImplicits.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "cloudflow\/spark\/sql\/LowPrioritySQLImplicits.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cloudflow\/spark\/sql\/LowPrioritySQLImplicits.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "cloudflow\/spark\/sql\/LowPrioritySQLImplicits.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cloudflow\/spark\/sql\/LowPrioritySQLImplicits.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cloudflow\/spark\/sql\/LowPrioritySQLImplicits.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "Lower priority implicit methods for converting Scala objects into org.apache.spark.sql.Datasets.", "trait" : "cloudflow\/spark\/sql\/LowPrioritySQLImplicits.html", "kind" : "trait"}, {"name" : "cloudflow.spark.sql.SQLImplicits", "shortDescription" : "A collection of implicit methods for converting common Scala objects into org.apache.spark.sql.Datasets.", "object" : "cloudflow\/spark\/sql\/SQLImplicits$.html", "members_object" : [{"label" : "symbolToColumn", "tail" : "(s: Symbol): ColumnName", "member" : "cloudflow.spark.sql.SQLImplicits.symbolToColumn", "link" : "cloudflow\/spark\/sql\/SQLImplicits$.html#symbolToColumn(s:Symbol):org.apache.spark.sql.ColumnName", "kind" : "implicit def"}, {"label" : "newProductArrayEncoder", "tail" : "(arg0: scala.reflect.api.JavaUniverse.TypeTag[A]): Encoder[Array[A]]", "member" : "cloudflow.spark.sql.SQLImplicits.newProductArrayEncoder", "link" : "cloudflow\/spark\/sql\/SQLImplicits$.html#newProductArrayEncoder[A<:Product](implicitevidence$5:reflect.runtime.universe.TypeTag[A]):org.apache.spark.sql.Encoder[Array[A]]", "kind" : "implicit def"}, {"label" : "newStringArrayEncoder", "tail" : "(): Encoder[Array[String]]", "member" : "cloudflow.spark.sql.SQLImplicits.newStringArrayEncoder", "link" : "cloudflow\/spark\/sql\/SQLImplicits$.html#newStringArrayEncoder:org.apache.spark.sql.Encoder[Array[String]]", "kind" : "implicit def"}, {"label" : "newBooleanArrayEncoder", "tail" : "(): Encoder[Array[Boolean]]", "member" : "cloudflow.spark.sql.SQLImplicits.newBooleanArrayEncoder", "link" : "cloudflow\/spark\/sql\/SQLImplicits$.html#newBooleanArrayEncoder:org.apache.spark.sql.Encoder[Array[Boolean]]", "kind" : "implicit def"}, {"label" : "newShortArrayEncoder", "tail" : "(): Encoder[Array[Short]]", "member" : "cloudflow.spark.sql.SQLImplicits.newShortArrayEncoder", "link" : "cloudflow\/spark\/sql\/SQLImplicits$.html#newShortArrayEncoder:org.apache.spark.sql.Encoder[Array[Short]]", "kind" : "implicit def"}, {"label" : "newByteArrayEncoder", "tail" : "(): Encoder[Array[Byte]]", "member" : "cloudflow.spark.sql.SQLImplicits.newByteArrayEncoder", "link" : "cloudflow\/spark\/sql\/SQLImplicits$.html#newByteArrayEncoder:org.apache.spark.sql.Encoder[Array[Byte]]", "kind" : "implicit def"}, {"label" : "newFloatArrayEncoder", "tail" : "(): Encoder[Array[Float]]", "member" : "cloudflow.spark.sql.SQLImplicits.newFloatArrayEncoder", "link" : "cloudflow\/spark\/sql\/SQLImplicits$.html#newFloatArrayEncoder:org.apache.spark.sql.Encoder[Array[Float]]", "kind" : "implicit def"}, {"label" : "newDoubleArrayEncoder", "tail" : "(): Encoder[Array[Double]]", "member" : "cloudflow.spark.sql.SQLImplicits.newDoubleArrayEncoder", "link" : "cloudflow\/spark\/sql\/SQLImplicits$.html#newDoubleArrayEncoder:org.apache.spark.sql.Encoder[Array[Double]]", "kind" : "implicit def"}, {"label" : "newLongArrayEncoder", "tail" : "(): Encoder[Array[Long]]", "member" : "cloudflow.spark.sql.SQLImplicits.newLongArrayEncoder", "link" : "cloudflow\/spark\/sql\/SQLImplicits$.html#newLongArrayEncoder:org.apache.spark.sql.Encoder[Array[Long]]", "kind" : "implicit def"}, {"label" : "newIntArrayEncoder", "tail" : "(): Encoder[Array[Int]]", "member" : "cloudflow.spark.sql.SQLImplicits.newIntArrayEncoder", "link" : "cloudflow\/spark\/sql\/SQLImplicits$.html#newIntArrayEncoder:org.apache.spark.sql.Encoder[Array[Int]]", "kind" : "implicit def"}, {"label" : "newSetEncoder", "tail" : "(arg0: scala.reflect.api.JavaUniverse.TypeTag[T]): Encoder[T]", "member" : "cloudflow.spark.sql.SQLImplicits.newSetEncoder", "link" : "cloudflow\/spark\/sql\/SQLImplicits$.html#newSetEncoder[T<:Set[_]](implicitevidence$4:reflect.runtime.universe.TypeTag[T]):org.apache.spark.sql.Encoder[T]", "kind" : "implicit def"}, {"label" : "newMapEncoder", "tail" : "(arg0: scala.reflect.api.JavaUniverse.TypeTag[T]): Encoder[T]", "member" : "cloudflow.spark.sql.SQLImplicits.newMapEncoder", "link" : "cloudflow\/spark\/sql\/SQLImplicits$.html#newMapEncoder[T<:scala.collection.Map[_,_]](implicitevidence$3:reflect.runtime.universe.TypeTag[T]):org.apache.spark.sql.Encoder[T]", "kind" : "implicit def"}, {"label" : "newSequenceEncoder", "tail" : "(arg0: scala.reflect.api.JavaUniverse.TypeTag[T]): Encoder[T]", "member" : "cloudflow.spark.sql.SQLImplicits.newSequenceEncoder", "link" : "cloudflow\/spark\/sql\/SQLImplicits$.html#newSequenceEncoder[T<:Seq[_]](implicitevidence$2:reflect.runtime.universe.TypeTag[T]):org.apache.spark.sql.Encoder[T]", "kind" : "implicit def"}, {"label" : "newProductSeqEncoder", "tail" : "(arg0: scala.reflect.api.JavaUniverse.TypeTag[A]): Encoder[Seq[A]]", "member" : "cloudflow.spark.sql.SQLImplicits.newProductSeqEncoder", "link" : "cloudflow\/spark\/sql\/SQLImplicits$.html#newProductSeqEncoder[A<:Product](implicitevidence$1:reflect.runtime.universe.TypeTag[A]):org.apache.spark.sql.Encoder[Seq[A]]", "kind" : "def"}, {"label" : "newStringSeqEncoder", "tail" : "(): Encoder[Seq[String]]", "member" : "cloudflow.spark.sql.SQLImplicits.newStringSeqEncoder", "link" : "cloudflow\/spark\/sql\/SQLImplicits$.html#newStringSeqEncoder:org.apache.spark.sql.Encoder[Seq[String]]", "kind" : "def"}, {"label" : "newBooleanSeqEncoder", "tail" : "(): Encoder[Seq[Boolean]]", "member" : "cloudflow.spark.sql.SQLImplicits.newBooleanSeqEncoder", "link" : "cloudflow\/spark\/sql\/SQLImplicits$.html#newBooleanSeqEncoder:org.apache.spark.sql.Encoder[Seq[Boolean]]", "kind" : "def"}, {"label" : "newShortSeqEncoder", "tail" : "(): Encoder[Seq[Short]]", "member" : "cloudflow.spark.sql.SQLImplicits.newShortSeqEncoder", "link" : "cloudflow\/spark\/sql\/SQLImplicits$.html#newShortSeqEncoder:org.apache.spark.sql.Encoder[Seq[Short]]", "kind" : "def"}, {"label" : "newByteSeqEncoder", "tail" : "(): Encoder[Seq[Byte]]", "member" : "cloudflow.spark.sql.SQLImplicits.newByteSeqEncoder", "link" : "cloudflow\/spark\/sql\/SQLImplicits$.html#newByteSeqEncoder:org.apache.spark.sql.Encoder[Seq[Byte]]", "kind" : "def"}, {"label" : "newFloatSeqEncoder", "tail" : "(): Encoder[Seq[Float]]", "member" : "cloudflow.spark.sql.SQLImplicits.newFloatSeqEncoder", "link" : "cloudflow\/spark\/sql\/SQLImplicits$.html#newFloatSeqEncoder:org.apache.spark.sql.Encoder[Seq[Float]]", "kind" : "def"}, {"label" : "newDoubleSeqEncoder", "tail" : "(): Encoder[Seq[Double]]", "member" : "cloudflow.spark.sql.SQLImplicits.newDoubleSeqEncoder", "link" : "cloudflow\/spark\/sql\/SQLImplicits$.html#newDoubleSeqEncoder:org.apache.spark.sql.Encoder[Seq[Double]]", "kind" : "def"}, {"label" : "newLongSeqEncoder", "tail" : "(): Encoder[Seq[Long]]", "member" : "cloudflow.spark.sql.SQLImplicits.newLongSeqEncoder", "link" : "cloudflow\/spark\/sql\/SQLImplicits$.html#newLongSeqEncoder:org.apache.spark.sql.Encoder[Seq[Long]]", "kind" : "def"}, {"label" : "newIntSeqEncoder", "tail" : "(): Encoder[Seq[Int]]", "member" : "cloudflow.spark.sql.SQLImplicits.newIntSeqEncoder", "link" : "cloudflow\/spark\/sql\/SQLImplicits$.html#newIntSeqEncoder:org.apache.spark.sql.Encoder[Seq[Int]]", "kind" : "def"}, {"label" : "newBoxedBooleanEncoder", "tail" : "(): Encoder[Boolean]", "member" : "cloudflow.spark.sql.SQLImplicits.newBoxedBooleanEncoder", "link" : "cloudflow\/spark\/sql\/SQLImplicits$.html#newBoxedBooleanEncoder:org.apache.spark.sql.Encoder[Boolean]", "kind" : "implicit def"}, {"label" : "newBoxedShortEncoder", "tail" : "(): Encoder[Short]", "member" : "cloudflow.spark.sql.SQLImplicits.newBoxedShortEncoder", "link" : "cloudflow\/spark\/sql\/SQLImplicits$.html#newBoxedShortEncoder:org.apache.spark.sql.Encoder[Short]", "kind" : "implicit def"}, {"label" : "newBoxedByteEncoder", "tail" : "(): Encoder[Byte]", "member" : "cloudflow.spark.sql.SQLImplicits.newBoxedByteEncoder", "link" : "cloudflow\/spark\/sql\/SQLImplicits$.html#newBoxedByteEncoder:org.apache.spark.sql.Encoder[Byte]", "kind" : "implicit def"}, {"label" : "newBoxedFloatEncoder", "tail" : "(): Encoder[Float]", "member" : "cloudflow.spark.sql.SQLImplicits.newBoxedFloatEncoder", "link" : "cloudflow\/spark\/sql\/SQLImplicits$.html#newBoxedFloatEncoder:org.apache.spark.sql.Encoder[Float]", "kind" : "implicit def"}, {"label" : "newBoxedDoubleEncoder", "tail" : "(): Encoder[Double]", "member" : "cloudflow.spark.sql.SQLImplicits.newBoxedDoubleEncoder", "link" : "cloudflow\/spark\/sql\/SQLImplicits$.html#newBoxedDoubleEncoder:org.apache.spark.sql.Encoder[Double]", "kind" : "implicit def"}, {"label" : "newBoxedLongEncoder", "tail" : "(): Encoder[Long]", "member" : "cloudflow.spark.sql.SQLImplicits.newBoxedLongEncoder", "link" : "cloudflow\/spark\/sql\/SQLImplicits$.html#newBoxedLongEncoder:org.apache.spark.sql.Encoder[Long]", "kind" : "implicit def"}, {"label" : "newBoxedIntEncoder", "tail" : "(): Encoder[Integer]", "member" : "cloudflow.spark.sql.SQLImplicits.newBoxedIntEncoder", "link" : "cloudflow\/spark\/sql\/SQLImplicits$.html#newBoxedIntEncoder:org.apache.spark.sql.Encoder[Integer]", "kind" : "implicit def"}, {"label" : "newTimeStampEncoder", "tail" : "(): Encoder[Timestamp]", "member" : "cloudflow.spark.sql.SQLImplicits.newTimeStampEncoder", "link" : "cloudflow\/spark\/sql\/SQLImplicits$.html#newTimeStampEncoder:org.apache.spark.sql.Encoder[java.sql.Timestamp]", "kind" : "implicit def"}, {"label" : "newDateEncoder", "tail" : "(): Encoder[Date]", "member" : "cloudflow.spark.sql.SQLImplicits.newDateEncoder", "link" : "cloudflow\/spark\/sql\/SQLImplicits$.html#newDateEncoder:org.apache.spark.sql.Encoder[java.sql.Date]", "kind" : "implicit def"}, {"label" : "newScalaDecimalEncoder", "tail" : "(): Encoder[BigDecimal]", "member" : "cloudflow.spark.sql.SQLImplicits.newScalaDecimalEncoder", "link" : "cloudflow\/spark\/sql\/SQLImplicits$.html#newScalaDecimalEncoder:org.apache.spark.sql.Encoder[scala.math.BigDecimal]", "kind" : "implicit def"}, {"label" : "newJavaDecimalEncoder", "tail" : "(): Encoder[BigDecimal]", "member" : "cloudflow.spark.sql.SQLImplicits.newJavaDecimalEncoder", "link" : "cloudflow\/spark\/sql\/SQLImplicits$.html#newJavaDecimalEncoder:org.apache.spark.sql.Encoder[java.math.BigDecimal]", "kind" : "implicit def"}, {"label" : "newStringEncoder", "tail" : "(): Encoder[String]", "member" : "cloudflow.spark.sql.SQLImplicits.newStringEncoder", "link" : "cloudflow\/spark\/sql\/SQLImplicits$.html#newStringEncoder:org.apache.spark.sql.Encoder[String]", "kind" : "implicit def"}, {"label" : "newBooleanEncoder", "tail" : "(): Encoder[Boolean]", "member" : "cloudflow.spark.sql.SQLImplicits.newBooleanEncoder", "link" : "cloudflow\/spark\/sql\/SQLImplicits$.html#newBooleanEncoder:org.apache.spark.sql.Encoder[Boolean]", "kind" : "implicit def"}, {"label" : "newShortEncoder", "tail" : "(): Encoder[Short]", "member" : "cloudflow.spark.sql.SQLImplicits.newShortEncoder", "link" : "cloudflow\/spark\/sql\/SQLImplicits$.html#newShortEncoder:org.apache.spark.sql.Encoder[Short]", "kind" : "implicit def"}, {"label" : "newByteEncoder", "tail" : "(): Encoder[Byte]", "member" : "cloudflow.spark.sql.SQLImplicits.newByteEncoder", "link" : "cloudflow\/spark\/sql\/SQLImplicits$.html#newByteEncoder:org.apache.spark.sql.Encoder[Byte]", "kind" : "implicit def"}, {"label" : "newFloatEncoder", "tail" : "(): Encoder[Float]", "member" : "cloudflow.spark.sql.SQLImplicits.newFloatEncoder", "link" : "cloudflow\/spark\/sql\/SQLImplicits$.html#newFloatEncoder:org.apache.spark.sql.Encoder[Float]", "kind" : "implicit def"}, {"label" : "newDoubleEncoder", "tail" : "(): Encoder[Double]", "member" : "cloudflow.spark.sql.SQLImplicits.newDoubleEncoder", "link" : "cloudflow\/spark\/sql\/SQLImplicits$.html#newDoubleEncoder:org.apache.spark.sql.Encoder[Double]", "kind" : "implicit def"}, {"label" : "newLongEncoder", "tail" : "(): Encoder[Long]", "member" : "cloudflow.spark.sql.SQLImplicits.newLongEncoder", "link" : "cloudflow\/spark\/sql\/SQLImplicits$.html#newLongEncoder:org.apache.spark.sql.Encoder[Long]", "kind" : "implicit def"}, {"label" : "newIntEncoder", "tail" : "(): Encoder[Int]", "member" : "cloudflow.spark.sql.SQLImplicits.newIntEncoder", "link" : "cloudflow\/spark\/sql\/SQLImplicits$.html#newIntEncoder:org.apache.spark.sql.Encoder[Int]", "kind" : "implicit def"}, {"label" : "StringToColumn", "tail" : "", "member" : "cloudflow.spark.sql.SQLImplicits.StringToColumn", "link" : "cloudflow\/spark\/sql\/SQLImplicits$.html#StringToColumnextendsAnyRef", "kind" : "implicit class"}, {"label" : "newProductEncoder", "tail" : "(arg0: scala.reflect.api.JavaUniverse.TypeTag[T]): Encoder[T]", "member" : "cloudflow.spark.sql.LowPrioritySQLImplicits.newProductEncoder", "link" : "cloudflow\/spark\/sql\/SQLImplicits$.html#newProductEncoder[T<:Product](implicitevidence$6:reflect.runtime.universe.TypeTag[T]):org.apache.spark.sql.Encoder[T]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cloudflow\/spark\/sql\/SQLImplicits$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cloudflow\/spark\/sql\/SQLImplicits$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cloudflow\/spark\/sql\/SQLImplicits$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cloudflow\/spark\/sql\/SQLImplicits$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cloudflow\/spark\/sql\/SQLImplicits$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cloudflow\/spark\/sql\/SQLImplicits$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cloudflow\/spark\/sql\/SQLImplicits$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cloudflow\/spark\/sql\/SQLImplicits$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cloudflow\/spark\/sql\/SQLImplicits$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cloudflow\/spark\/sql\/SQLImplicits$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cloudflow\/spark\/sql\/SQLImplicits$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cloudflow\/spark\/sql\/SQLImplicits$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cloudflow\/spark\/sql\/SQLImplicits$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cloudflow\/spark\/sql\/SQLImplicits$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "cloudflow\/spark\/sql\/SQLImplicits$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cloudflow\/spark\/sql\/SQLImplicits$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "cloudflow\/spark\/sql\/SQLImplicits$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cloudflow\/spark\/sql\/SQLImplicits$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cloudflow\/spark\/sql\/SQLImplicits$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "cloudflow.spark.testkit" : [{"name" : "cloudflow.spark.testkit.ConfigParameterValue", "shortDescription" : "", "object" : "cloudflow\/spark\/testkit\/ConfigParameterValue$.html", "members_object" : [{"label" : "create", "tail" : "(configParameter: ConfigParameter, value: String): ConfigParameterValue", "member" : "cloudflow.spark.testkit.ConfigParameterValue.create", "link" : "cloudflow\/spark\/testkit\/ConfigParameterValue$.html#create(configParameter:cloudflow.streamlets.ConfigParameter,value:String):cloudflow.spark.testkit.ConfigParameterValue", "kind" : "def"}, {"label" : "apply", "tail" : "(configParameter: ConfigParameter, value: String): ConfigParameterValue", "member" : "cloudflow.spark.testkit.ConfigParameterValue.apply", "link" : "cloudflow\/spark\/testkit\/ConfigParameterValue$.html#apply(configParameter:cloudflow.streamlets.ConfigParameter,value:String):cloudflow.spark.testkit.ConfigParameterValue", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cloudflow\/spark\/testkit\/ConfigParameterValue$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cloudflow\/spark\/testkit\/ConfigParameterValue$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cloudflow\/spark\/testkit\/ConfigParameterValue$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cloudflow\/spark\/testkit\/ConfigParameterValue$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cloudflow\/spark\/testkit\/ConfigParameterValue$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cloudflow\/spark\/testkit\/ConfigParameterValue$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cloudflow\/spark\/testkit\/ConfigParameterValue$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cloudflow\/spark\/testkit\/ConfigParameterValue$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cloudflow\/spark\/testkit\/ConfigParameterValue$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cloudflow\/spark\/testkit\/ConfigParameterValue$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cloudflow\/spark\/testkit\/ConfigParameterValue$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cloudflow\/spark\/testkit\/ConfigParameterValue$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cloudflow\/spark\/testkit\/ConfigParameterValue$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cloudflow\/spark\/testkit\/ConfigParameterValue$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "cloudflow\/spark\/testkit\/ConfigParameterValue$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cloudflow\/spark\/testkit\/ConfigParameterValue$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "cloudflow\/spark\/testkit\/ConfigParameterValue$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cloudflow\/spark\/testkit\/ConfigParameterValue$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cloudflow\/spark\/testkit\/ConfigParameterValue$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "value", "tail" : ": String", "member" : "cloudflow.spark.testkit.ConfigParameterValue.value", "link" : "cloudflow\/spark\/testkit\/ConfigParameterValue.html#value:String", "kind" : "val"}, {"label" : "configParameterKey", "tail" : ": String", "member" : "cloudflow.spark.testkit.ConfigParameterValue.configParameterKey", "link" : "cloudflow\/spark\/testkit\/ConfigParameterValue.html#configParameterKey:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cloudflow\/spark\/testkit\/ConfigParameterValue.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cloudflow\/spark\/testkit\/ConfigParameterValue.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cloudflow\/spark\/testkit\/ConfigParameterValue.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cloudflow\/spark\/testkit\/ConfigParameterValue.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cloudflow\/spark\/testkit\/ConfigParameterValue.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cloudflow\/spark\/testkit\/ConfigParameterValue.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cloudflow\/spark\/testkit\/ConfigParameterValue.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cloudflow\/spark\/testkit\/ConfigParameterValue.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cloudflow\/spark\/testkit\/ConfigParameterValue.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cloudflow\/spark\/testkit\/ConfigParameterValue.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cloudflow\/spark\/testkit\/ConfigParameterValue.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cloudflow\/spark\/testkit\/ConfigParameterValue.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cloudflow\/spark\/testkit\/ConfigParameterValue.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "cloudflow\/spark\/testkit\/ConfigParameterValue.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cloudflow\/spark\/testkit\/ConfigParameterValue.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cloudflow\/spark\/testkit\/ConfigParameterValue.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "cloudflow\/spark\/testkit\/ConfigParameterValue.html", "kind" : "object"}, {"name" : "cloudflow.spark.testkit.ExecutionReport", "shortDescription" : "", "members_case class" : [{"label" : "toString", "tail" : "(): String", "member" : "cloudflow.spark.testkit.ExecutionReport.toString", "link" : "cloudflow\/spark\/testkit\/ExecutionReport.html#toString():String", "kind" : "def"}, {"member" : "cloudflow.spark.testkit.ExecutionReport#<init>", "error" : "unsupported entity"}, {"label" : "failures", "tail" : ": Seq[String]", "member" : "cloudflow.spark.testkit.ExecutionReport.failures", "link" : "cloudflow\/spark\/testkit\/ExecutionReport.html#failures:Seq[String]", "kind" : "val"}, {"label" : "totalQueries", "tail" : ": Int", "member" : "cloudflow.spark.testkit.ExecutionReport.totalQueries", "link" : "cloudflow\/spark\/testkit\/ExecutionReport.html#totalQueries:Int", "kind" : "val"}, {"label" : "totalRows", "tail" : ": Long", "member" : "cloudflow.spark.testkit.ExecutionReport.totalRows", "link" : "cloudflow\/spark\/testkit\/ExecutionReport.html#totalRows:Long", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cloudflow\/spark\/testkit\/ExecutionReport.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cloudflow\/spark\/testkit\/ExecutionReport.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cloudflow\/spark\/testkit\/ExecutionReport.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cloudflow\/spark\/testkit\/ExecutionReport.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cloudflow\/spark\/testkit\/ExecutionReport.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cloudflow\/spark\/testkit\/ExecutionReport.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cloudflow\/spark\/testkit\/ExecutionReport.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cloudflow\/spark\/testkit\/ExecutionReport.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cloudflow\/spark\/testkit\/ExecutionReport.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cloudflow\/spark\/testkit\/ExecutionReport.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cloudflow\/spark\/testkit\/ExecutionReport.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cloudflow\/spark\/testkit\/ExecutionReport.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cloudflow\/spark\/testkit\/ExecutionReport.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "cloudflow\/spark\/testkit\/ExecutionReport.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cloudflow\/spark\/testkit\/ExecutionReport.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cloudflow\/spark\/testkit\/ExecutionReport.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "cloudflow\/spark\/testkit\/ExecutionReport.html", "kind" : "case class"}, {"name" : "cloudflow.spark.testkit.QueryExecutionMonitor", "shortDescription" : "", "members_class" : [{"label" : "onQueryProgress", "tail" : "(queryProgress: QueryProgressEvent): Unit", "member" : "cloudflow.spark.testkit.QueryExecutionMonitor.onQueryProgress", "link" : "cloudflow\/spark\/testkit\/QueryExecutionMonitor.html#onQueryProgress(queryProgress:org.apache.spark.sql.streaming.StreamingQueryListener.QueryProgressEvent):Unit", "kind" : "def"}, {"label" : "onQueryTerminated", "tail" : "(queryTerminated: QueryTerminatedEvent): Unit", "member" : "cloudflow.spark.testkit.QueryExecutionMonitor.onQueryTerminated", "link" : "cloudflow\/spark\/testkit\/QueryExecutionMonitor.html#onQueryTerminated(queryTerminated:org.apache.spark.sql.streaming.StreamingQueryListener.QueryTerminatedEvent):Unit", "kind" : "def"}, {"label" : "onQueryStarted", "tail" : "(queryStarted: QueryStartedEvent): Unit", "member" : "cloudflow.spark.testkit.QueryExecutionMonitor.onQueryStarted", "link" : "cloudflow\/spark\/testkit\/QueryExecutionMonitor.html#onQueryStarted(queryStarted:org.apache.spark.sql.streaming.StreamingQueryListener.QueryStartedEvent):Unit", "kind" : "def"}, {"label" : "waitForData", "tail" : "(): Future[Long]", "member" : "cloudflow.spark.testkit.QueryExecutionMonitor.waitForData", "link" : "cloudflow\/spark\/testkit\/QueryExecutionMonitor.html#waitForData():scala.concurrent.Future[Long]", "kind" : "def"}, {"label" : "executionReport", "tail" : "(): ExecutionReport", "member" : "cloudflow.spark.testkit.QueryExecutionMonitor.executionReport", "link" : "cloudflow\/spark\/testkit\/QueryExecutionMonitor.html#executionReport:cloudflow.spark.testkit.ExecutionReport", "kind" : "def"}, {"label" : "hasData", "tail" : "(): Boolean", "member" : "cloudflow.spark.testkit.QueryExecutionMonitor.hasData", "link" : "cloudflow\/spark\/testkit\/QueryExecutionMonitor.html#hasData:Boolean", "kind" : "def"}, {"label" : "Terminated", "tail" : "", "member" : "cloudflow.spark.testkit.QueryExecutionMonitor.Terminated", "link" : "cloudflow\/spark\/testkit\/QueryExecutionMonitor.html#TerminatedextendsQueryExecutionMonitor.this.QueryStatewithProductwithSerializable", "kind" : "case class"}, {"label" : "Started", "tail" : "", "member" : "cloudflow.spark.testkit.QueryExecutionMonitor.Started", "link" : "cloudflow\/spark\/testkit\/QueryExecutionMonitor.html#Started", "kind" : "object"}, {"label" : "QueryState", "tail" : "", "member" : "cloudflow.spark.testkit.QueryExecutionMonitor.QueryState", "link" : "cloudflow\/spark\/testkit\/QueryExecutionMonitor.html#QueryStateextendsAnyRef", "kind" : "sealed trait"}, {"label" : "dataAvailable", "tail" : ": Promise[Long]", "member" : "cloudflow.spark.testkit.QueryExecutionMonitor.dataAvailable", "link" : "cloudflow\/spark\/testkit\/QueryExecutionMonitor.html#dataAvailable:scala.concurrent.Promise[Long]", "kind" : "val"}, {"label" : "dataRows", "tail" : ": Map[UUID, Long]", "member" : "cloudflow.spark.testkit.QueryExecutionMonitor.dataRows", "link" : "cloudflow\/spark\/testkit\/QueryExecutionMonitor.html#dataRows:Map[java.util.UUID,Long]", "kind" : "var"}, {"label" : "status", "tail" : ": Map[UUID, QueryState]", "member" : "cloudflow.spark.testkit.QueryExecutionMonitor.status", "link" : "cloudflow\/spark\/testkit\/QueryExecutionMonitor.html#status:Map[java.util.UUID,QueryExecutionMonitor.this.QueryState]", "kind" : "var"}, {"member" : "cloudflow.spark.testkit.QueryExecutionMonitor#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cloudflow\/spark\/testkit\/QueryExecutionMonitor.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cloudflow\/spark\/testkit\/QueryExecutionMonitor.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cloudflow\/spark\/testkit\/QueryExecutionMonitor.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cloudflow\/spark\/testkit\/QueryExecutionMonitor.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cloudflow\/spark\/testkit\/QueryExecutionMonitor.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cloudflow\/spark\/testkit\/QueryExecutionMonitor.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cloudflow\/spark\/testkit\/QueryExecutionMonitor.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cloudflow\/spark\/testkit\/QueryExecutionMonitor.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cloudflow\/spark\/testkit\/QueryExecutionMonitor.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cloudflow\/spark\/testkit\/QueryExecutionMonitor.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cloudflow\/spark\/testkit\/QueryExecutionMonitor.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cloudflow\/spark\/testkit\/QueryExecutionMonitor.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cloudflow\/spark\/testkit\/QueryExecutionMonitor.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cloudflow\/spark\/testkit\/QueryExecutionMonitor.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "cloudflow\/spark\/testkit\/QueryExecutionMonitor.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cloudflow\/spark\/testkit\/QueryExecutionMonitor.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "cloudflow\/spark\/testkit\/QueryExecutionMonitor.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cloudflow\/spark\/testkit\/QueryExecutionMonitor.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cloudflow\/spark\/testkit\/QueryExecutionMonitor.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "cloudflow\/spark\/testkit\/QueryExecutionMonitor.html", "kind" : "class"}, {"name" : "cloudflow.spark.testkit.SparkInletTap", "shortDescription" : "", "members_case class" : [{"label" : "addData", "tail" : "(data: Seq[T]): Offset", "member" : "cloudflow.spark.testkit.SparkInletTap.addData", "link" : "cloudflow\/spark\/testkit\/SparkInletTap.html#addData(data:Seq[T]):org.apache.spark.sql.execution.streaming.Offset", "kind" : "def"}, {"member" : "cloudflow.spark.testkit.SparkInletTap#<init>", "error" : "unsupported entity"}, {"label" : "instream", "tail" : ": MemoryStream[T]", "member" : "cloudflow.spark.testkit.SparkInletTap.instream", "link" : "cloudflow\/spark\/testkit\/SparkInletTap.html#instream:org.apache.spark.sql.execution.streaming.MemoryStream[T]", "kind" : "val"}, {"label" : "portName", "tail" : ": String", "member" : "cloudflow.spark.testkit.SparkInletTap.portName", "link" : "cloudflow\/spark\/testkit\/SparkInletTap.html#portName:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cloudflow\/spark\/testkit\/SparkInletTap.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cloudflow\/spark\/testkit\/SparkInletTap.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cloudflow\/spark\/testkit\/SparkInletTap.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cloudflow\/spark\/testkit\/SparkInletTap.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cloudflow\/spark\/testkit\/SparkInletTap.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cloudflow\/spark\/testkit\/SparkInletTap.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cloudflow\/spark\/testkit\/SparkInletTap.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cloudflow\/spark\/testkit\/SparkInletTap.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cloudflow\/spark\/testkit\/SparkInletTap.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cloudflow\/spark\/testkit\/SparkInletTap.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cloudflow\/spark\/testkit\/SparkInletTap.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cloudflow\/spark\/testkit\/SparkInletTap.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cloudflow\/spark\/testkit\/SparkInletTap.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "cloudflow\/spark\/testkit\/SparkInletTap.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cloudflow\/spark\/testkit\/SparkInletTap.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cloudflow\/spark\/testkit\/SparkInletTap.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "cloudflow\/spark\/testkit\/SparkInletTap.html", "kind" : "case class"}, {"name" : "cloudflow.spark.testkit.SparkOutletTap", "shortDescription" : "", "members_case class" : [{"label" : "asCollection", "tail" : "(session: SparkSession): Seq[T]", "member" : "cloudflow.spark.testkit.SparkOutletTap.asCollection", "link" : "cloudflow\/spark\/testkit\/SparkOutletTap.html#asCollection(session:org.apache.spark.sql.SparkSession):Seq[T]", "kind" : "def"}, {"member" : "cloudflow.spark.testkit.SparkOutletTap#<init>", "error" : "unsupported entity"}, {"label" : "queryName", "tail" : ": String", "member" : "cloudflow.spark.testkit.SparkOutletTap.queryName", "link" : "cloudflow\/spark\/testkit\/SparkOutletTap.html#queryName:String", "kind" : "val"}, {"label" : "portName", "tail" : ": String", "member" : "cloudflow.spark.testkit.SparkOutletTap.portName", "link" : "cloudflow\/spark\/testkit\/SparkOutletTap.html#portName:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cloudflow\/spark\/testkit\/SparkOutletTap.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cloudflow\/spark\/testkit\/SparkOutletTap.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cloudflow\/spark\/testkit\/SparkOutletTap.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cloudflow\/spark\/testkit\/SparkOutletTap.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cloudflow\/spark\/testkit\/SparkOutletTap.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cloudflow\/spark\/testkit\/SparkOutletTap.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cloudflow\/spark\/testkit\/SparkOutletTap.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cloudflow\/spark\/testkit\/SparkOutletTap.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cloudflow\/spark\/testkit\/SparkOutletTap.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cloudflow\/spark\/testkit\/SparkOutletTap.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cloudflow\/spark\/testkit\/SparkOutletTap.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cloudflow\/spark\/testkit\/SparkOutletTap.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cloudflow\/spark\/testkit\/SparkOutletTap.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "cloudflow\/spark\/testkit\/SparkOutletTap.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cloudflow\/spark\/testkit\/SparkOutletTap.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cloudflow\/spark\/testkit\/SparkOutletTap.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "cloudflow\/spark\/testkit\/SparkOutletTap.html", "kind" : "case class"}, {"name" : "cloudflow.spark.testkit.SparkScalaTestSupport", "members_trait" : [{"label" : "RegexWrapper", "tail" : "", "member" : "org.scalatest.matchers.must.Matchers.RegexWrapper", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#RegexWrapperextendsAnyRef", "kind" : "final class"}, {"label" : "StringMustWrapper", "tail" : "", "member" : "org.scalatest.matchers.must.Matchers.StringMustWrapper", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#StringMustWrapperextendsMatchers.this.AnyMustWrapper[String]withMatchers.this.StringMustWrapperForVerb", "kind" : "final class"}, {"label" : "AnyMustWrapper", "tail" : "", "member" : "org.scalatest.matchers.must.Matchers.AnyMustWrapper", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#AnyMustWrapper[T<:<?>]extendsAnyRef", "kind" : "sealed class"}, {"label" : "ResultOfFullyMatchWordForCollectedString", "tail" : "", "member" : "org.scalatest.matchers.must.Matchers.ResultOfFullyMatchWordForCollectedString", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#ResultOfFullyMatchWordForCollectedStringextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfEndWithWordForCollectedString", "tail" : "", "member" : "org.scalatest.matchers.must.Matchers.ResultOfEndWithWordForCollectedString", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#ResultOfEndWithWordForCollectedStringextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfIncludeWordForCollectedString", "tail" : "", "member" : "org.scalatest.matchers.must.Matchers.ResultOfIncludeWordForCollectedString", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#ResultOfIncludeWordForCollectedStringextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfStartWithWordForCollectedString", "tail" : "", "member" : "org.scalatest.matchers.must.Matchers.ResultOfStartWithWordForCollectedString", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#ResultOfStartWithWordForCollectedStringextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfHaveWordForCollectedExtent", "tail" : "", "member" : "org.scalatest.matchers.must.Matchers.ResultOfHaveWordForCollectedExtent", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#ResultOfHaveWordForCollectedExtent[A<:<?>]extendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfCollectedAny", "tail" : "", "member" : "org.scalatest.matchers.must.Matchers.ResultOfCollectedAny", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#ResultOfCollectedAny[T<:<?>]extendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfBeWordForCollectedArray", "tail" : "", "member" : "org.scalatest.matchers.must.Matchers.ResultOfBeWordForCollectedArray", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#ResultOfBeWordForCollectedArray[T<:<?>]extendsMatchers.this.ResultOfBeWordForCollectedAny[Array[T]]", "kind" : "final class"}, {"label" : "ResultOfBeWordForCollectedAny", "tail" : "", "member" : "org.scalatest.matchers.must.Matchers.ResultOfBeWordForCollectedAny", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#ResultOfBeWordForCollectedAny[T<:<?>]extendsAnyRef", "kind" : "sealed class"}, {"label" : "ResultOfContainWordForCollectedAny", "tail" : "", "member" : "org.scalatest.matchers.must.Matchers.ResultOfContainWordForCollectedAny", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#ResultOfContainWordForCollectedAny[T<:<?>]extendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfNotWordForCollectedAny", "tail" : "", "member" : "org.scalatest.matchers.must.Matchers.ResultOfNotWordForCollectedAny", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#ResultOfNotWordForCollectedAny[T<:<?>]extendsAnyRef", "kind" : "final class"}, {"label" : "Collected", "tail" : "", "member" : "org.scalatest.matchers.must.Matchers.Collected", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#CollectedextendsSerializable", "kind" : "sealed class"}, {"label" : "ResultOfHaveWordForExtent", "tail" : "", "member" : "org.scalatest.matchers.must.Matchers.ResultOfHaveWordForExtent", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#ResultOfHaveWordForExtent[A<:<?>]extendsAnyRef", "kind" : "final class"}, {"label" : "TheSameInstanceAsPhrase", "tail" : "", "member" : "org.scalatest.matchers.must.Matchers.TheSameInstanceAsPhrase", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#TheSameInstanceAsPhraseextendsAnyRef", "kind" : "final class"}, {"label" : "AnWord", "tail" : "", "member" : "org.scalatest.matchers.must.Matchers.AnWord", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#AnWordextendsAnyRef", "kind" : "final class"}, {"label" : "AWord", "tail" : "", "member" : "org.scalatest.matchers.must.Matchers.AWord", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#AWordextendsAnyRef", "kind" : "final class"}, {"label" : "ValueWord", "tail" : "", "member" : "org.scalatest.matchers.must.Matchers.ValueWord", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#ValueWordextendsAnyRef", "kind" : "final class"}, {"label" : "KeyWord", "tail" : "", "member" : "org.scalatest.matchers.must.Matchers.KeyWord", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#KeyWordextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfFullyMatchWordForString", "tail" : "", "member" : "org.scalatest.matchers.must.Matchers.ResultOfFullyMatchWordForString", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#ResultOfFullyMatchWordForStringextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfEndWithWordForString", "tail" : "", "member" : "org.scalatest.matchers.must.Matchers.ResultOfEndWithWordForString", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#ResultOfEndWithWordForStringextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfStartWithWordForString", "tail" : "", "member" : "org.scalatest.matchers.must.Matchers.ResultOfStartWithWordForString", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#ResultOfStartWithWordForStringextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfIncludeWordForString", "tail" : "", "member" : "org.scalatest.matchers.must.Matchers.ResultOfIncludeWordForString", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#ResultOfIncludeWordForStringextendsAnyRef", "kind" : "final class"}, {"label" : "RegexWord", "tail" : "", "member" : "org.scalatest.matchers.must.Matchers.RegexWord", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#RegexWordextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfBeWordForAny", "tail" : "", "member" : "org.scalatest.matchers.must.Matchers.ResultOfBeWordForAny", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#ResultOfBeWordForAny[T<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "HavePropertyMatcherGenerator", "tail" : "", "member" : "org.scalatest.matchers.must.Matchers.HavePropertyMatcherGenerator", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#HavePropertyMatcherGeneratorextendsAnyRef", "kind" : "final class"}, {"label" : "TheAfterWord", "tail" : "", "member" : "org.scalactic.Explicitly.TheAfterWord", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#TheAfterWordextendsAnyRef", "kind" : "class"}, {"label" : "DeterminedByEquivalence", "tail" : "", "member" : "org.scalactic.Explicitly.DeterminedByEquivalence", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#DeterminedByEquivalence[T<:<?>]extendsEquivalence[T]", "kind" : "class"}, {"label" : "DecidedByEquality", "tail" : "", "member" : "org.scalactic.Explicitly.DecidedByEquality", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#DecidedByEquality[A<:<?>]extendsEquality[A]", "kind" : "class"}, {"label" : "DeterminedWord", "tail" : "", "member" : "org.scalactic.Explicitly.DeterminedWord", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#DeterminedWordextendsAnyRef", "kind" : "class"}, {"label" : "DecidedWord", "tail" : "", "member" : "org.scalactic.Explicitly.DecidedWord", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#DecidedWordextendsAnyRef", "kind" : "class"}, {"label" : "PlusOrMinusWrapper", "tail" : "", "member" : "org.scalactic.Tolerance.PlusOrMinusWrapper", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#PlusOrMinusWrapper[T<:<?>]extendsAnyRef", "kind" : "final class"}, {"label" : "TheyWord", "tail" : "", "member" : "org.scalatest.wordspec.AnyWordSpecLike.TheyWord", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#TheyWordextendsAnyRef", "kind" : "final class"}, {"label" : "ItWord", "tail" : "", "member" : "org.scalatest.wordspec.AnyWordSpecLike.ItWord", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#ItWordextendsAnyRef", "kind" : "final class"}, {"label" : "AfterWord", "tail" : "", "member" : "org.scalatest.wordspec.AnyWordSpecLike.AfterWord", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#AfterWordextendsAnyRef", "kind" : "final class"}, {"label" : "WordSpecStringWrapper", "tail" : "", "member" : "org.scalatest.wordspec.AnyWordSpecLike.WordSpecStringWrapper", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#WordSpecStringWrapperextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfTaggedAsInvocationOnString", "tail" : "", "member" : "org.scalatest.wordspec.AnyWordSpecLike.ResultOfTaggedAsInvocationOnString", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#ResultOfTaggedAsInvocationOnStringextendsAnyRef", "kind" : "final class"}, {"label" : "StringCanWrapperForVerb", "tail" : "", "member" : "org.scalatest.verbs.CanVerb.StringCanWrapperForVerb", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#StringCanWrapperForVerbextendsAnyRef", "kind" : "trait"}, {"label" : "StringMustWrapperForVerb", "tail" : "", "member" : "org.scalatest.verbs.MustVerb.StringMustWrapperForVerb", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#StringMustWrapperForVerbextendsAnyRef", "kind" : "trait"}, {"label" : "StringShouldWrapperForVerb", "tail" : "", "member" : "org.scalatest.verbs.ShouldVerb.StringShouldWrapperForVerb", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#StringShouldWrapperForVerbextendsAnyRef", "kind" : "trait"}, {"label" : "NoArgTest", "tail" : "", "member" : "org.scalatest.TestSuite.NoArgTest", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#NoArgTestextends()=>org.scalatest.OutcomewithTestData", "kind" : "trait"}, {"label" : "CheckingEqualizer", "tail" : "", "member" : "org.scalactic.TripleEqualsSupport.CheckingEqualizer", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#CheckingEqualizer[L<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "Equalizer", "tail" : "", "member" : "org.scalactic.TripleEqualsSupport.Equalizer", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#Equalizer[L<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "afterAll", "tail" : "(): Unit", "member" : "cloudflow.spark.testkit.SparkScalaTestSupport.afterAll", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#afterAll():Unit", "kind" : "def"}, {"label" : "sqlCtx", "tail" : ": SQLContext", "member" : "cloudflow.spark.testkit.SparkScalaTestSupport.sqlCtx", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#sqlCtx:org.apache.spark.sql.SQLContext", "kind" : "implicit lazy val"}, {"label" : "session", "tail" : ": SparkSession", "member" : "cloudflow.spark.testkit.SparkScalaTestSupport.session", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#session:org.apache.spark.sql.SparkSession", "kind" : "val"}, {"label" : "run", "tail" : "(testName: Option[String], args: Args): Status", "member" : "org.scalatest.BeforeAndAfterAll.run", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#run(testName:Option[String],args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "beforeAll", "tail" : "(): Unit", "member" : "org.scalatest.BeforeAndAfterAll.beforeAll", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#beforeAll():Unit", "kind" : "def"}, {"label" : "invokeBeforeAllAndAfterAllEvenIfNoTestsAreExpected", "tail" : ": Boolean", "member" : "org.scalatest.BeforeAndAfterAll.invokeBeforeAllAndAfterAllEvenIfNoTestsAreExpected", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#invokeBeforeAllAndAfterAllEvenIfNoTestsAreExpected:Boolean", "kind" : "val"}, {"label" : "of", "tail" : "(ev: ClassTag[T]): ResultOfOfTypeInvocation[T]", "member" : "org.scalatest.matchers.must.Matchers.of", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#of[T](implicitev:scala.reflect.ClassTag[T]):org.scalatest.matchers.dsl.ResultOfOfTypeInvocation[T]", "kind" : "def"}, {"label" : "convertToRegexWrapper", "tail" : "(o: Regex): RegexWrapper", "member" : "org.scalatest.matchers.must.Matchers.convertToRegexWrapper", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#convertToRegexWrapper(o:scala.util.matching.Regex):Matchers.this.RegexWrapper", "kind" : "implicit def"}, {"label" : "convertToStringMustWrapper", "tail" : "(o: String)(pos: Position, prettifier: Prettifier): StringMustWrapper", "member" : "org.scalatest.matchers.must.Matchers.convertToStringMustWrapper", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#convertToStringMustWrapper(o:String)(implicitpos:org.scalactic.source.Position,implicitprettifier:org.scalactic.Prettifier):Matchers.this.StringMustWrapper", "kind" : "implicit def"}, {"label" : "convertToAnyMustWrapper", "tail" : "(o: T)(pos: Position, prettifier: Prettifier): AnyMustWrapper[T]", "member" : "org.scalatest.matchers.must.Matchers.convertToAnyMustWrapper", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#convertToAnyMustWrapper[T](o:T)(implicitpos:org.scalactic.source.Position,implicitprettifier:org.scalactic.Prettifier):Matchers.this.AnyMustWrapper[T]", "kind" : "implicit def"}, {"label" : "the", "tail" : "(arg0: ClassTag[T], pos: Position): ResultOfTheTypeInvocation[T]", "member" : "org.scalatest.matchers.must.Matchers.the", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#the[T](implicitevidence$7:scala.reflect.ClassTag[T],implicitpos:org.scalactic.source.Position):org.scalatest.matchers.dsl.ResultOfTheTypeInvocation[T]", "kind" : "def"}, {"label" : "an", "tail" : "(arg0: ClassTag[T]): ResultOfAnTypeInvocation[T]", "member" : "org.scalatest.matchers.must.Matchers.an", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#an[T](implicitevidence$6:scala.reflect.ClassTag[T]):org.scalatest.matchers.dsl.ResultOfAnTypeInvocation[T]", "kind" : "def"}, {"label" : "a", "tail" : "(arg0: ClassTag[T]): ResultOfATypeInvocation[T]", "member" : "org.scalatest.matchers.must.Matchers.a", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#a[T](implicitevidence$5:scala.reflect.ClassTag[T]):org.scalatest.matchers.dsl.ResultOfATypeInvocation[T]", "kind" : "def"}, {"label" : "atMost", "tail" : "(num: Int, xs: String)(collecting: Collecting[Char, String], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Char]", "member" : "org.scalatest.matchers.must.Matchers.atMost", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#atMost(num:Int,xs:String)(implicitcollecting:org.scalatest.enablers.Collecting[Char,String],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[Char]", "kind" : "def"}, {"label" : "atMost", "tail" : "(num: Int, xs: JMAP[K, V])(collecting: Collecting[Entry[K, V], JMAP[K, V]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Entry[K, V]]", "member" : "org.scalatest.matchers.must.Matchers.atMost", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#atMost[K,V,JMAP<:<?>](num:Int,xs:JMAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[org.scalatest.Entry[K,V],JMAP[K,V]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[org.scalatest.Entry[K,V]]", "kind" : "def"}, {"label" : "atMost", "tail" : "(num: Int, xs: MAP[K, V])(collecting: Collecting[(K, V), GenTraversable[(K, V)]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[(K, V)]", "member" : "org.scalatest.matchers.must.Matchers.atMost", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#atMost[K,V,MAP<:<?>](num:Int,xs:MAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[(K,V),scala.collection.GenTraversable[(K,V)]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[(K,V)]", "kind" : "def"}, {"label" : "atMost", "tail" : "(num: Int, xs: C[E])(collecting: Collecting[E, C[E]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[E]", "member" : "org.scalatest.matchers.must.Matchers.atMost", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#atMost[E,C<:<?>](num:Int,xs:C[E])(implicitcollecting:org.scalatest.enablers.Collecting[E,C[E]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[E]", "kind" : "def"}, {"label" : "between", "tail" : "(from: Int, upTo: Int, xs: String)(collecting: Collecting[Char, String], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Char]", "member" : "org.scalatest.matchers.must.Matchers.between", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#between(from:Int,upTo:Int,xs:String)(implicitcollecting:org.scalatest.enablers.Collecting[Char,String],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[Char]", "kind" : "def"}, {"label" : "between", "tail" : "(from: Int, upTo: Int, xs: JMAP[K, V])(collecting: Collecting[Entry[K, V], JMAP[K, V]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Entry[K, V]]", "member" : "org.scalatest.matchers.must.Matchers.between", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#between[K,V,JMAP<:<?>](from:Int,upTo:Int,xs:JMAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[org.scalatest.Entry[K,V],JMAP[K,V]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[org.scalatest.Entry[K,V]]", "kind" : "def"}, {"label" : "between", "tail" : "(from: Int, upTo: Int, xs: C[E])(collecting: Collecting[E, C[E]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[E]", "member" : "org.scalatest.matchers.must.Matchers.between", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#between[E,C<:<?>](from:Int,upTo:Int,xs:C[E])(implicitcollecting:org.scalatest.enablers.Collecting[E,C[E]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[E]", "kind" : "def"}, {"label" : "no", "tail" : "(xs: String)(collecting: Collecting[Char, String], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Char]", "member" : "org.scalatest.matchers.must.Matchers.no", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#no(xs:String)(implicitcollecting:org.scalatest.enablers.Collecting[Char,String],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[Char]", "kind" : "def"}, {"label" : "no", "tail" : "(xs: JMAP[K, V])(collecting: Collecting[Entry[K, V], JMAP[K, V]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Entry[K, V]]", "member" : "org.scalatest.matchers.must.Matchers.no", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#no[K,V,JMAP<:<?>](xs:JMAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[org.scalatest.Entry[K,V],JMAP[K,V]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[org.scalatest.Entry[K,V]]", "kind" : "def"}, {"label" : "no", "tail" : "(xs: C[E])(collecting: Collecting[E, C[E]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[E]", "member" : "org.scalatest.matchers.must.Matchers.no", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#no[E,C<:<?>](xs:C[E])(implicitcollecting:org.scalatest.enablers.Collecting[E,C[E]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[E]", "kind" : "def"}, {"label" : "exactly", "tail" : "(num: Int, xs: String)(collecting: Collecting[Char, String], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Char]", "member" : "org.scalatest.matchers.must.Matchers.exactly", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#exactly(num:Int,xs:String)(implicitcollecting:org.scalatest.enablers.Collecting[Char,String],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[Char]", "kind" : "def"}, {"label" : "exactly", "tail" : "(num: Int, xs: JMAP[K, V])(collecting: Collecting[Entry[K, V], JMAP[K, V]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Entry[K, V]]", "member" : "org.scalatest.matchers.must.Matchers.exactly", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#exactly[K,V,JMAP<:<?>](num:Int,xs:JMAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[org.scalatest.Entry[K,V],JMAP[K,V]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[org.scalatest.Entry[K,V]]", "kind" : "def"}, {"label" : "exactly", "tail" : "(num: Int, xs: MAP[K, V])(collecting: Collecting[(K, V), GenTraversable[(K, V)]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[(K, V)]", "member" : "org.scalatest.matchers.must.Matchers.exactly", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#exactly[K,V,MAP<:<?>](num:Int,xs:MAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[(K,V),scala.collection.GenTraversable[(K,V)]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[(K,V)]", "kind" : "def"}, {"label" : "exactly", "tail" : "(num: Int, xs: C[E])(collecting: Collecting[E, C[E]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[E]", "member" : "org.scalatest.matchers.must.Matchers.exactly", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#exactly[E,C<:<?>](num:Int,xs:C[E])(implicitcollecting:org.scalatest.enablers.Collecting[E,C[E]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[E]", "kind" : "def"}, {"label" : "every", "tail" : "(xs: String)(collecting: Collecting[Char, String], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Char]", "member" : "org.scalatest.matchers.must.Matchers.every", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#every(xs:String)(implicitcollecting:org.scalatest.enablers.Collecting[Char,String],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[Char]", "kind" : "def"}, {"label" : "every", "tail" : "(xs: JMAP[K, V])(collecting: Collecting[Entry[K, V], JMAP[K, V]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Entry[K, V]]", "member" : "org.scalatest.matchers.must.Matchers.every", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#every[K,V,JMAP<:<?>](xs:JMAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[org.scalatest.Entry[K,V],JMAP[K,V]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[org.scalatest.Entry[K,V]]", "kind" : "def"}, {"label" : "every", "tail" : "(xs: MAP[K, V])(collecting: Collecting[(K, V), GenTraversable[(K, V)]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[(K, V)]", "member" : "org.scalatest.matchers.must.Matchers.every", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#every[K,V,MAP<:<?>](xs:MAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[(K,V),scala.collection.GenTraversable[(K,V)]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[(K,V)]", "kind" : "def"}, {"label" : "every", "tail" : "(xs: C[E])(collecting: Collecting[E, C[E]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[E]", "member" : "org.scalatest.matchers.must.Matchers.every", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#every[E,C<:<?>](xs:C[E])(implicitcollecting:org.scalatest.enablers.Collecting[E,C[E]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[E]", "kind" : "def"}, {"label" : "atLeast", "tail" : "(num: Int, xs: String)(collecting: Collecting[Char, String], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Char]", "member" : "org.scalatest.matchers.must.Matchers.atLeast", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#atLeast(num:Int,xs:String)(implicitcollecting:org.scalatest.enablers.Collecting[Char,String],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[Char]", "kind" : "def"}, {"label" : "atLeast", "tail" : "(num: Int, xs: JMAP[K, V])(collecting: Collecting[Entry[K, V], JMAP[K, V]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Entry[K, V]]", "member" : "org.scalatest.matchers.must.Matchers.atLeast", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#atLeast[K,V,JMAP<:<?>](num:Int,xs:JMAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[org.scalatest.Entry[K,V],JMAP[K,V]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[org.scalatest.Entry[K,V]]", "kind" : "def"}, {"label" : "atLeast", "tail" : "(num: Int, xs: MAP[K, V])(collecting: Collecting[(K, V), GenTraversable[(K, V)]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[(K, V)]", "member" : "org.scalatest.matchers.must.Matchers.atLeast", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#atLeast[K,V,MAP<:<?>](num:Int,xs:MAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[(K,V),scala.collection.GenTraversable[(K,V)]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[(K,V)]", "kind" : "def"}, {"label" : "atLeast", "tail" : "(num: Int, xs: C[E])(collecting: Collecting[E, C[E]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[E]", "member" : "org.scalatest.matchers.must.Matchers.atLeast", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#atLeast[E,C<:<?>](num:Int,xs:C[E])(implicitcollecting:org.scalatest.enablers.Collecting[E,C[E]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[E]", "kind" : "def"}, {"label" : "all", "tail" : "(xs: String)(collecting: Collecting[Char, String], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Char]", "member" : "org.scalatest.matchers.must.Matchers.all", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#all(xs:String)(implicitcollecting:org.scalatest.enablers.Collecting[Char,String],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[Char]", "kind" : "def"}, {"label" : "all", "tail" : "(xs: JMAP[K, V])(collecting: Collecting[Entry[K, V], JMAP[K, V]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[Entry[K, V]]", "member" : "org.scalatest.matchers.must.Matchers.all", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#all[K,V,JMAP<:<?>](xs:JMAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[org.scalatest.Entry[K,V],JMAP[K,V]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[org.scalatest.Entry[K,V]]", "kind" : "def"}, {"label" : "all", "tail" : "(xs: MAP[K, V])(collecting: Collecting[(K, V), GenTraversable[(K, V)]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[(K, V)]", "member" : "org.scalatest.matchers.must.Matchers.all", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#all[K,V,MAP<:<?>](xs:MAP[K,V])(implicitcollecting:org.scalatest.enablers.Collecting[(K,V),scala.collection.GenTraversable[(K,V)]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[(K,V)]", "kind" : "def"}, {"label" : "all", "tail" : "(xs: C[E])(collecting: Collecting[E, C[E]], prettifier: Prettifier, pos: Position): ResultOfCollectedAny[E]", "member" : "org.scalatest.matchers.must.Matchers.all", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#all[E,C<:<?>](xs:C[E])(implicitcollecting:org.scalatest.enablers.Collecting[E,C[E]],implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.ResultOfCollectedAny[E]", "kind" : "def"}, {"label" : "message", "tail" : "(expectedMessage: String): ResultOfMessageWordApplication", "member" : "org.scalatest.matchers.must.Matchers.message", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#message(expectedMessage:String):org.scalatest.matchers.dsl.ResultOfMessageWordApplication", "kind" : "def"}, {"label" : "thrownBy", "tail" : "(fun: ⇒ Any): ResultOfThrownByApplication", "member" : "org.scalatest.matchers.must.Matchers.thrownBy", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#thrownBy(fun:=>Any):org.scalatest.matchers.dsl.ResultOfThrownByApplication", "kind" : "def"}, {"label" : "atMostOneElementOf", "tail" : "(elements: GenTraversable[R]): ResultOfAtMostOneElementOfApplication", "member" : "org.scalatest.matchers.must.Matchers.atMostOneElementOf", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#atMostOneElementOf[R](elements:scala.collection.GenTraversable[R]):org.scalatest.matchers.dsl.ResultOfAtMostOneElementOfApplication", "kind" : "def"}, {"label" : "atMostOneOf", "tail" : "(firstEle: Any, secondEle: Any, remainingEles: Any*)(pos: Position): ResultOfAtMostOneOfApplication", "member" : "org.scalatest.matchers.must.Matchers.atMostOneOf", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#atMostOneOf(firstEle:Any,secondEle:Any,remainingEles:Any*)(implicitpos:org.scalactic.source.Position):org.scalatest.matchers.dsl.ResultOfAtMostOneOfApplication", "kind" : "def"}, {"label" : "inOrderElementsOf", "tail" : "(elements: GenTraversable[R]): ResultOfInOrderElementsOfApplication", "member" : "org.scalatest.matchers.must.Matchers.inOrderElementsOf", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#inOrderElementsOf[R](elements:scala.collection.GenTraversable[R]):org.scalatest.matchers.dsl.ResultOfInOrderElementsOfApplication", "kind" : "def"}, {"label" : "inOrder", "tail" : "(firstEle: Any, secondEle: Any, remainingEles: Any*)(pos: Position): ResultOfInOrderApplication", "member" : "org.scalatest.matchers.must.Matchers.inOrder", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#inOrder(firstEle:Any,secondEle:Any,remainingEles:Any*)(implicitpos:org.scalactic.source.Position):org.scalatest.matchers.dsl.ResultOfInOrderApplication", "kind" : "def"}, {"label" : "allElementsOf", "tail" : "(elements: GenTraversable[R]): ResultOfAllElementsOfApplication", "member" : "org.scalatest.matchers.must.Matchers.allElementsOf", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#allElementsOf[R](elements:scala.collection.GenTraversable[R]):org.scalatest.matchers.dsl.ResultOfAllElementsOfApplication", "kind" : "def"}, {"label" : "allOf", "tail" : "(firstEle: Any, secondEle: Any, remainingEles: Any*)(pos: Position): ResultOfAllOfApplication", "member" : "org.scalatest.matchers.must.Matchers.allOf", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#allOf(firstEle:Any,secondEle:Any,remainingEles:Any*)(implicitpos:org.scalactic.source.Position):org.scalatest.matchers.dsl.ResultOfAllOfApplication", "kind" : "def"}, {"label" : "inOrderOnly", "tail" : "(firstEle: Any, secondEle: Any, remainingEles: Any*)(pos: Position): ResultOfInOrderOnlyApplication", "member" : "org.scalatest.matchers.must.Matchers.inOrderOnly", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#inOrderOnly[T<:<?>](firstEle:Any,secondEle:Any,remainingEles:Any*)(implicitpos:org.scalactic.source.Position):org.scalatest.matchers.dsl.ResultOfInOrderOnlyApplication", "kind" : "def"}, {"label" : "only", "tail" : "(xs: Any*)(pos: Position): ResultOfOnlyApplication", "member" : "org.scalatest.matchers.must.Matchers.only", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#only(xs:Any*)(implicitpos:org.scalactic.source.Position):org.scalatest.matchers.dsl.ResultOfOnlyApplication", "kind" : "def"}, {"label" : "theSameElementsInOrderAs", "tail" : "(xs: GenTraversable[_]): ResultOfTheSameElementsInOrderAsApplication", "member" : "org.scalatest.matchers.must.Matchers.theSameElementsInOrderAs", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#theSameElementsInOrderAs(xs:scala.collection.GenTraversable[_]):org.scalatest.matchers.dsl.ResultOfTheSameElementsInOrderAsApplication", "kind" : "def"}, {"label" : "theSameElementsAs", "tail" : "(xs: GenTraversable[_]): ResultOfTheSameElementsAsApplication", "member" : "org.scalatest.matchers.must.Matchers.theSameElementsAs", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#theSameElementsAs(xs:scala.collection.GenTraversable[_]):org.scalatest.matchers.dsl.ResultOfTheSameElementsAsApplication", "kind" : "def"}, {"label" : "noElementsOf", "tail" : "(elements: GenTraversable[Any]): ResultOfNoElementsOfApplication", "member" : "org.scalatest.matchers.must.Matchers.noElementsOf", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#noElementsOf(elements:scala.collection.GenTraversable[Any]):org.scalatest.matchers.dsl.ResultOfNoElementsOfApplication", "kind" : "def"}, {"label" : "noneOf", "tail" : "(firstEle: Any, secondEle: Any, remainingEles: Any*)(pos: Position): ResultOfNoneOfApplication", "member" : "org.scalatest.matchers.must.Matchers.noneOf", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#noneOf(firstEle:Any,secondEle:Any,remainingEles:Any*)(implicitpos:org.scalactic.source.Position):org.scalatest.matchers.dsl.ResultOfNoneOfApplication", "kind" : "def"}, {"label" : "atLeastOneElementOf", "tail" : "(elements: GenTraversable[Any]): ResultOfAtLeastOneElementOfApplication", "member" : "org.scalatest.matchers.must.Matchers.atLeastOneElementOf", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#atLeastOneElementOf(elements:scala.collection.GenTraversable[Any]):org.scalatest.matchers.dsl.ResultOfAtLeastOneElementOfApplication", "kind" : "def"}, {"label" : "atLeastOneOf", "tail" : "(firstEle: Any, secondEle: Any, remainingEles: Any*)(pos: Position): ResultOfAtLeastOneOfApplication", "member" : "org.scalatest.matchers.must.Matchers.atLeastOneOf", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#atLeastOneOf(firstEle:Any,secondEle:Any,remainingEles:Any*)(implicitpos:org.scalactic.source.Position):org.scalatest.matchers.dsl.ResultOfAtLeastOneOfApplication", "kind" : "def"}, {"label" : "oneElementOf", "tail" : "(elements: GenTraversable[Any]): ResultOfOneElementOfApplication", "member" : "org.scalatest.matchers.must.Matchers.oneElementOf", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#oneElementOf(elements:scala.collection.GenTraversable[Any]):org.scalatest.matchers.dsl.ResultOfOneElementOfApplication", "kind" : "def"}, {"label" : "oneOf", "tail" : "(firstEle: Any, secondEle: Any, remainingEles: Any*)(pos: Position): ResultOfOneOfApplication", "member" : "org.scalatest.matchers.must.Matchers.oneOf", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#oneOf(firstEle:Any,secondEle:Any,remainingEles:Any*)(implicitpos:org.scalactic.source.Position):org.scalatest.matchers.dsl.ResultOfOneOfApplication", "kind" : "def"}, {"label" : "definedAt", "tail" : "(right: T): ResultOfDefinedAt[T]", "member" : "org.scalatest.matchers.must.Matchers.definedAt", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#definedAt[T](right:T):org.scalatest.matchers.dsl.ResultOfDefinedAt[T]", "kind" : "def"}, {"label" : ">=", "tail" : "(right: T)(arg0: Ordering[T]): ResultOfGreaterThanOrEqualToComparison[T]", "member" : "org.scalatest.matchers.must.Matchers.>=", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#>=[T](right:T)(implicitevidence$4:Ordering[T]):org.scalatest.matchers.dsl.ResultOfGreaterThanOrEqualToComparison[T]", "kind" : "def"}, {"label" : "<=", "tail" : "(right: T)(arg0: Ordering[T]): ResultOfLessThanOrEqualToComparison[T]", "member" : "org.scalatest.matchers.must.Matchers.<=", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#<=[T](right:T)(implicitevidence$3:Ordering[T]):org.scalatest.matchers.dsl.ResultOfLessThanOrEqualToComparison[T]", "kind" : "def"}, {"label" : ">", "tail" : "(right: T)(arg0: Ordering[T]): ResultOfGreaterThanComparison[T]", "member" : "org.scalatest.matchers.must.Matchers.>", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#>[T](right:T)(implicitevidence$2:Ordering[T]):org.scalatest.matchers.dsl.ResultOfGreaterThanComparison[T]", "kind" : "def"}, {"label" : "<", "tail" : "(right: T)(arg0: Ordering[T]): ResultOfLessThanComparison[T]", "member" : "org.scalatest.matchers.must.Matchers.<", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#<[T](right:T)(implicitevidence$1:Ordering[T]):org.scalatest.matchers.dsl.ResultOfLessThanComparison[T]", "kind" : "def"}, {"label" : "regex", "tail" : ": RegexWord", "member" : "org.scalatest.matchers.must.Matchers.regex", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#regex:Matchers.this.RegexWord", "kind" : "val"}, {"label" : "theSameInstanceAs", "tail" : ": TheSameInstanceAsPhrase", "member" : "org.scalatest.matchers.must.Matchers.theSameInstanceAs", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#theSameInstanceAs:Matchers.this.TheSameInstanceAsPhrase", "kind" : "val"}, {"label" : "an", "tail" : ": AnWord", "member" : "org.scalatest.matchers.must.Matchers.an", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#an:Matchers.this.AnWord", "kind" : "val"}, {"label" : "a", "tail" : ": AWord", "member" : "org.scalatest.matchers.must.Matchers.a", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#a:Matchers.this.AWord", "kind" : "val"}, {"label" : "value", "tail" : ": ValueWord", "member" : "org.scalatest.matchers.must.Matchers.value", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#value:Matchers.this.ValueWord", "kind" : "val"}, {"label" : "key", "tail" : ": KeyWord", "member" : "org.scalatest.matchers.must.Matchers.key", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#key:Matchers.this.KeyWord", "kind" : "val"}, {"label" : "equal", "tail" : "(o: Null): Matcher[AnyRef]", "member" : "org.scalatest.matchers.must.Matchers.equal", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#equal(o:Null):org.scalatest.matchers.Matcher[AnyRef]", "kind" : "def"}, {"label" : "equal", "tail" : "(spread: Spread[T]): Matcher[T]", "member" : "org.scalatest.matchers.must.Matchers.equal", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#equal[T](spread:org.scalactic.TripleEqualsSupport.Spread[T]):org.scalatest.matchers.Matcher[T]", "kind" : "def"}, {"label" : "convertSymbolToHavePropertyMatcherGenerator", "tail" : "(symbol: Symbol)(prettifier: Prettifier, pos: Position): HavePropertyMatcherGenerator", "member" : "org.scalatest.matchers.must.Matchers.convertSymbolToHavePropertyMatcherGenerator", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#convertSymbolToHavePropertyMatcherGenerator(symbol:Symbol)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):Matchers.this.HavePropertyMatcherGenerator", "kind" : "implicit def"}, {"label" : "after", "tail" : ": TheAfterWord", "member" : "org.scalactic.Explicitly.after", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#after:Explicitly.this.TheAfterWord", "kind" : "val"}, {"label" : "determined", "tail" : ": DeterminedWord", "member" : "org.scalactic.Explicitly.determined", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#determined:Explicitly.this.DeterminedWord", "kind" : "val"}, {"label" : "decided", "tail" : ": DecidedWord", "member" : "org.scalactic.Explicitly.decided", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#decided:Explicitly.this.DecidedWord", "kind" : "val"}, {"label" : "equal", "tail" : "(right: Any): MatcherFactory1[Any, Equality]", "member" : "org.scalatest.matchers.dsl.MatcherWords.equal", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#equal(right:Any):org.scalatest.matchers.dsl.MatcherFactory1[Any,org.scalactic.Equality]", "kind" : "def"}, {"label" : "matchPattern", "tail" : ": MatchPatternWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.matchPattern", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#matchPattern:org.scalatest.matchers.dsl.MatchPatternWord", "kind" : "val"}, {"label" : "typeCheck", "tail" : ": TypeCheckWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.typeCheck", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#typeCheck:org.scalatest.verbs.TypeCheckWord", "kind" : "val"}, {"label" : "compile", "tail" : ": CompileWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.compile", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#compile:org.scalatest.verbs.CompileWord", "kind" : "val"}, {"label" : "empty", "tail" : ": EmptyWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.empty", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#empty:org.scalatest.matchers.dsl.EmptyWord", "kind" : "val"}, {"label" : "writable", "tail" : ": WritableWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.writable", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#writable:org.scalatest.matchers.dsl.WritableWord", "kind" : "val"}, {"label" : "readable", "tail" : ": ReadableWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.readable", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#readable:org.scalatest.matchers.dsl.ReadableWord", "kind" : "val"}, {"label" : "exist", "tail" : ": ExistWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.exist", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#exist:org.scalatest.matchers.dsl.ExistWord", "kind" : "val"}, {"label" : "noException", "tail" : "(pos: Position): NoExceptionWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.noException", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#noException(implicitpos:org.scalactic.source.Position):org.scalatest.matchers.dsl.NoExceptionWord", "kind" : "def"}, {"label" : "defined", "tail" : ": DefinedWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.defined", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#defined:org.scalatest.matchers.dsl.DefinedWord", "kind" : "val"}, {"label" : "sorted", "tail" : ": SortedWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.sorted", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#sorted:org.scalatest.matchers.dsl.SortedWord", "kind" : "val"}, {"label" : "size", "tail" : ": SizeWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.size", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#size:org.scalatest.matchers.dsl.SizeWord", "kind" : "val"}, {"label" : "length", "tail" : ": LengthWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.length", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#length:org.scalatest.matchers.dsl.LengthWord", "kind" : "val"}, {"label" : "not", "tail" : ": NotWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.not", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#not:org.scalatest.matchers.dsl.NotWord", "kind" : "val"}, {"label" : "contain", "tail" : ": ContainWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.contain", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#contain:org.scalatest.matchers.dsl.ContainWord", "kind" : "val"}, {"label" : "be", "tail" : ": BeWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.be", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#be:org.scalatest.matchers.dsl.BeWord", "kind" : "val"}, {"label" : "have", "tail" : ": HaveWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.have", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#have:org.scalatest.matchers.dsl.HaveWord", "kind" : "val"}, {"label" : "include", "tail" : ": IncludeWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.include", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#include:org.scalatest.matchers.dsl.IncludeWord", "kind" : "val"}, {"label" : "endWith", "tail" : ": EndWithWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.endWith", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#endWith:org.scalatest.matchers.dsl.EndWithWord", "kind" : "val"}, {"label" : "startWith", "tail" : ": StartWithWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.startWith", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#startWith:org.scalatest.matchers.dsl.StartWithWord", "kind" : "val"}, {"label" : "fullyMatch", "tail" : ": FullyMatchWord", "member" : "org.scalatest.matchers.dsl.MatcherWords.fullyMatch", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#fullyMatch:org.scalatest.matchers.dsl.FullyMatchWord", "kind" : "val"}, {"label" : "convertNumericToPlusOrMinusWrapper", "tail" : "(pivot: T)(arg0: Numeric[T]): PlusOrMinusWrapper[T]", "member" : "org.scalactic.Tolerance.convertNumericToPlusOrMinusWrapper", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#convertNumericToPlusOrMinusWrapper[T](pivot:T)(implicitevidence$2:Numeric[T]):Tolerance.this.PlusOrMinusWrapper[T]", "kind" : "implicit def"}, {"label" : "testDataFor", "tail" : "(testName: String, theConfigMap: ConfigMap): TestData", "member" : "org.scalatest.wordspec.AnyWordSpecLike.testDataFor", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#testDataFor(testName:String,theConfigMap:org.scalatest.ConfigMap):org.scalatest.TestData", "kind" : "def"}, {"label" : "styleName", "tail" : ": String", "member" : "org.scalatest.wordspec.AnyWordSpecLike.styleName", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#styleName:String", "kind" : "final val"}, {"label" : "behave", "tail" : ": BehaveWord", "member" : "org.scalatest.wordspec.AnyWordSpecLike.behave", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#behave:org.scalatest.verbs.BehaveWord", "kind" : "val"}, {"label" : "testNames", "tail" : "(): Set[String]", "member" : "org.scalatest.wordspec.AnyWordSpecLike.testNames", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#testNames:Set[String]", "kind" : "def"}, {"label" : "runTests", "tail" : "(testName: Option[String], args: Args): Status", "member" : "org.scalatest.wordspec.AnyWordSpecLike.runTests", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#runTests(testName:Option[String],args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "runTest", "tail" : "(testName: String, args: Args): Status", "member" : "org.scalatest.wordspec.AnyWordSpecLike.runTest", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#runTest(testName:String,args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "tags", "tail" : "(): Map[String, Set[String]]", "member" : "org.scalatest.wordspec.AnyWordSpecLike.tags", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#tags:Map[String,Set[String]]", "kind" : "def"}, {"label" : "subjectWithAfterWordRegistrationFunction", "tail" : ": SubjectWithAfterWordRegistration", "member" : "org.scalatest.wordspec.AnyWordSpecLike.subjectWithAfterWordRegistrationFunction", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#subjectWithAfterWordRegistrationFunction:org.scalatest.verbs.SubjectWithAfterWordRegistration", "kind" : "implicit val"}, {"label" : "subjectRegistrationFunction", "tail" : ": StringVerbBlockRegistration", "member" : "org.scalatest.wordspec.AnyWordSpecLike.subjectRegistrationFunction", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#subjectRegistrationFunction:org.scalatest.verbs.StringVerbBlockRegistration", "kind" : "implicit val"}, {"label" : "convertToWordSpecStringWrapper", "tail" : "(s: String): WordSpecStringWrapper", "member" : "org.scalatest.wordspec.AnyWordSpecLike.convertToWordSpecStringWrapper", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#convertToWordSpecStringWrapper(s:String):AnyWordSpecLike.this.WordSpecStringWrapper", "kind" : "implicit def"}, {"label" : "they", "tail" : ": TheyWord", "member" : "org.scalatest.wordspec.AnyWordSpecLike.they", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#they:AnyWordSpecLike.this.TheyWord", "kind" : "val"}, {"label" : "it", "tail" : ": ItWord", "member" : "org.scalatest.wordspec.AnyWordSpecLike.it", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#it:AnyWordSpecLike.this.ItWord", "kind" : "val"}, {"label" : "afterWord", "tail" : "(text: String): AfterWord", "member" : "org.scalatest.wordspec.AnyWordSpecLike.afterWord", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#afterWord(text:String):AnyWordSpecLike.this.AfterWord", "kind" : "def"}, {"label" : "registerIgnoredTest", "tail" : "(testText: String, testTags: Tag*)(testFun: ⇒ Any)(pos: Position): Unit", "member" : "org.scalatest.wordspec.AnyWordSpecLike.registerIgnoredTest", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#registerIgnoredTest(testText:String,testTags:org.scalatest.Tag*)(testFun:=>Any)(implicitpos:org.scalactic.source.Position):Unit", "kind" : "final def"}, {"label" : "registerTest", "tail" : "(testText: String, testTags: Tag*)(testFun: ⇒ Any)(pos: Position): Unit", "member" : "org.scalatest.wordspec.AnyWordSpecLike.registerTest", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#registerTest(testText:String,testTags:org.scalatest.Tag*)(testFun:=>Any)(implicitpos:org.scalactic.source.Position):Unit", "kind" : "final def"}, {"label" : "markup", "tail" : "(): Documenter", "member" : "org.scalatest.wordspec.AnyWordSpecLike.markup", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#markup:org.scalatest.Documenter", "kind" : "def"}, {"label" : "alert", "tail" : "(): Alerter", "member" : "org.scalatest.wordspec.AnyWordSpecLike.alert", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#alert:org.scalatest.Alerter", "kind" : "def"}, {"label" : "note", "tail" : "(): Notifier", "member" : "org.scalatest.wordspec.AnyWordSpecLike.note", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#note:org.scalatest.Notifier", "kind" : "def"}, {"label" : "info", "tail" : "(): Informer", "member" : "org.scalatest.wordspec.AnyWordSpecLike.info", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#info:org.scalatest.Informer", "kind" : "def"}, {"label" : "convertToStringCanWrapper", "tail" : "(o: String)(position: Position): StringCanWrapperForVerb", "member" : "org.scalatest.verbs.CanVerb.convertToStringCanWrapper", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#convertToStringCanWrapper(o:String)(implicitposition:org.scalactic.source.Position):CanVerb.this.StringCanWrapperForVerb", "kind" : "implicit def"}, {"label" : "convertToStringMustWrapperForVerb", "tail" : "(o: String)(position: Position): StringMustWrapperForVerb", "member" : "org.scalatest.verbs.MustVerb.convertToStringMustWrapperForVerb", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#convertToStringMustWrapperForVerb(o:String)(implicitposition:org.scalactic.source.Position):MustVerb.this.StringMustWrapperForVerb", "kind" : "implicit def"}, {"label" : "convertToStringShouldWrapperForVerb", "tail" : "(o: String)(position: Position): StringShouldWrapperForVerb", "member" : "org.scalatest.verbs.ShouldVerb.convertToStringShouldWrapperForVerb", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#convertToStringShouldWrapperForVerb(o:String)(implicitposition:org.scalactic.source.Position):ShouldVerb.this.StringShouldWrapperForVerb", "kind" : "implicit def"}, {"label" : "withFixture", "tail" : "(test: NoArgTest): Outcome", "member" : "org.scalatest.TestSuite.withFixture", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#withFixture(test:TestSuite.this.NoArgTest):org.scalatest.Outcome", "kind" : "def"}, {"label" : "rerunner", "tail" : "(): Option[String]", "member" : "org.scalatest.Suite.rerunner", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#rerunner:Option[String]", "kind" : "def"}, {"label" : "expectedTestCount", "tail" : "(filter: Filter): Int", "member" : "org.scalatest.Suite.expectedTestCount", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#expectedTestCount(filter:org.scalatest.Filter):Int", "kind" : "def"}, {"label" : "suiteId", "tail" : "(): String", "member" : "org.scalatest.Suite.suiteId", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#suiteId:String", "kind" : "def"}, {"label" : "suiteName", "tail" : "(): String", "member" : "org.scalatest.Suite.suiteName", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#suiteName:String", "kind" : "def"}, {"label" : "runNestedSuites", "tail" : "(args: Args): Status", "member" : "org.scalatest.Suite.runNestedSuites", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#runNestedSuites(args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "execute", "tail" : "(testName: String, configMap: ConfigMap, color: Boolean, durations: Boolean, shortstacks: Boolean, fullstacks: Boolean, stats: Boolean): Unit", "member" : "org.scalatest.Suite.execute", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#execute(testName:String,configMap:org.scalatest.ConfigMap,color:Boolean,durations:Boolean,shortstacks:Boolean,fullstacks:Boolean,stats:Boolean):Unit", "kind" : "final def"}, {"label" : "nestedSuites", "tail" : "(): IndexedSeq[Suite]", "member" : "org.scalatest.Suite.nestedSuites", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#nestedSuites:scala.collection.immutable.IndexedSeq[org.scalatest.Suite]", "kind" : "def"}, {"label" : "succeed", "tail" : ": Assertion", "member" : "org.scalatest.Assertions.succeed", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#succeed:org.scalatest.Assertion", "kind" : "final val"}, {"label" : "pendingUntilFixed", "tail" : "(f: ⇒ Unit)(pos: Position): Assertion with PendingStatement", "member" : "org.scalatest.Assertions.pendingUntilFixed", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#pendingUntilFixed(f:=>Unit)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertionwithorg.scalatest.PendingStatement", "kind" : "def"}, {"label" : "pending", "tail" : "(): Assertion with PendingStatement", "member" : "org.scalatest.Assertions.pending", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#pending:org.scalatest.Assertionwithorg.scalatest.PendingStatement", "kind" : "def"}, {"label" : "withClue", "tail" : "(clue: Any)(fun: ⇒ T): T", "member" : "org.scalatest.Assertions.withClue", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#withClue[T](clue:Any)(fun:=>T):T", "kind" : "def"}, {"label" : "cancel", "tail" : "(cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#cancel(cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "(message: String, cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#cancel(message:String,cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "(message: String)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#cancel(message:String)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "()(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#cancel()(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#fail(cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(message: String, cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#fail(message:String,cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(message: String)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#fail(message:String)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "()(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#fail()(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "assertResult", "tail" : "(expected: Any)(actual: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertResult", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#assertResult(expected:Any)(actual:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "assertResult", "tail" : "(expected: Any, clue: Any)(actual: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertResult", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#assertResult(expected:Any,clue:Any)(actual:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "assertThrows", "tail" : "(f: ⇒ Any)(classTag: ClassTag[T], pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertThrows", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#assertThrows[T<:AnyRef](f:=>Any)(implicitclassTag:scala.reflect.ClassTag[T],implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "intercept", "tail" : "(f: ⇒ Any)(classTag: ClassTag[T], pos: Position): T", "member" : "org.scalatest.Assertions.intercept", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#intercept[T<:AnyRef](f:=>Any)(implicitclassTag:scala.reflect.ClassTag[T],implicitpos:org.scalactic.source.Position):T", "kind" : "def"}, {"label" : "assertCompiles", "tail" : "(code: String)(pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertCompiles", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#assertCompiles(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assertDoesNotCompile", "tail" : "(code: String)(pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertDoesNotCompile", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#assertDoesNotCompile(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assertTypeError", "tail" : "(code: String)(pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertTypeError", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#assertTypeError(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assume", "tail" : "(condition: Boolean, clue: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assume", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#assume(condition:Boolean,clue:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assume", "tail" : "(condition: Boolean)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assume", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#assume(condition:Boolean)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assert", "tail" : "(condition: Boolean, clue: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assert", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#assert(condition:Boolean,clue:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assert", "tail" : "(condition: Boolean)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assert", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#assert(condition:Boolean)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "convertEquivalenceToBToAConversionConstraint", "tail" : "(equivalenceOfA: Equivalence[A])(ev: (B) ⇒ A): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToBToAConversionConstraint", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#convertEquivalenceToBToAConversionConstraint[A,B](equivalenceOfA:org.scalactic.Equivalence[A])(implicitev:B=>A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "conversionCheckedConstraint", "tail" : "(equivalenceOfA: Equivalence[A], cnv: (B) ⇒ A): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.conversionCheckedConstraint", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#conversionCheckedConstraint[A,B](implicitequivalenceOfA:org.scalactic.Equivalence[A],implicitcnv:B=>A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToAToBConversionConstraint", "tail" : "(equivalenceOfB: Equivalence[B])(ev: (A) ⇒ B): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToAToBConversionConstraint", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#convertEquivalenceToAToBConversionConstraint[A,B](equivalenceOfB:org.scalactic.Equivalence[B])(implicitev:A=>B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "lowPriorityConversionCheckedConstraint", "tail" : "(equivalenceOfB: Equivalence[B], cnv: (A) ⇒ B): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.lowPriorityConversionCheckedConstraint", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#lowPriorityConversionCheckedConstraint[A,B](implicitequivalenceOfB:org.scalactic.Equivalence[B],implicitcnv:A=>B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToBToAConstraint", "tail" : "(equivalenceOfA: Equivalence[A])(ev: <:<[B, A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToBToAConstraint", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#convertEquivalenceToBToAConstraint[A,B](equivalenceOfA:org.scalactic.Equivalence[A])(implicitev:B<:<A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "typeCheckedConstraint", "tail" : "(equivalenceOfA: Equivalence[A], ev: <:<[B, A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.typeCheckedConstraint", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#typeCheckedConstraint[A,B](implicitequivalenceOfA:org.scalactic.Equivalence[A],implicitev:B<:<A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToAToBConstraint", "tail" : "(equivalenceOfB: Equivalence[B])(ev: <:<[A, B]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToAToBConstraint", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#convertEquivalenceToAToBConstraint[A,B](equivalenceOfB:org.scalactic.Equivalence[B])(implicitev:A<:<B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "lowPriorityTypeCheckedConstraint", "tail" : "(equivalenceOfB: Equivalence[B], ev: <:<[A, B]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.lowPriorityTypeCheckedConstraint", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#lowPriorityTypeCheckedConstraint[A,B](implicitequivalenceOfB:org.scalactic.Equivalence[B],implicitev:A<:<B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "unconstrainedEquality", "tail" : "(equalityOfA: Equality[A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.unconstrainedEquality", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#unconstrainedEquality[A,B](implicitequalityOfA:org.scalactic.Equality[A]):org.scalactic.CanEqual[A,B]", "kind" : "implicit def"}, {"label" : "convertToCheckingEqualizer", "tail" : "(left: T): CheckingEqualizer[T]", "member" : "org.scalactic.TripleEquals.convertToCheckingEqualizer", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#convertToCheckingEqualizer[T](left:T):TripleEquals.this.CheckingEqualizer[T]", "kind" : "def"}, {"label" : "convertToEqualizer", "tail" : "(left: T): Equalizer[T]", "member" : "org.scalactic.TripleEquals.convertToEqualizer", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#convertToEqualizer[T](left:T):TripleEquals.this.Equalizer[T]", "kind" : "implicit def"}, {"label" : "!==", "tail" : "(right: Spread[T]): TripleEqualsInvocationOnSpread[T]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#!==[T](right:org.scalactic.TripleEqualsSupport.Spread[T]):org.scalactic.TripleEqualsSupport.TripleEqualsInvocationOnSpread[T]", "kind" : "def"}, {"label" : "===", "tail" : "(right: Spread[T]): TripleEqualsInvocationOnSpread[T]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#===[T](right:org.scalactic.TripleEqualsSupport.Spread[T]):org.scalactic.TripleEqualsSupport.TripleEqualsInvocationOnSpread[T]", "kind" : "def"}, {"label" : "!==", "tail" : "(right: Null): TripleEqualsInvocation[Null]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#!==(right:Null):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[Null]", "kind" : "def"}, {"label" : "===", "tail" : "(right: Null): TripleEqualsInvocation[Null]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#===(right:Null):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[Null]", "kind" : "def"}, {"label" : "!==", "tail" : "(right: T): TripleEqualsInvocation[T]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#!==[T](right:T):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[T]", "kind" : "def"}, {"label" : "===", "tail" : "(right: T): TripleEqualsInvocation[T]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#===[T](right:T):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[T]", "kind" : "def"}, {"label" : "defaultEquality", "tail" : "(): Equality[A]", "member" : "org.scalactic.TripleEqualsSupport.defaultEquality", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#defaultEquality[A]:org.scalactic.Equality[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "cloudflow\/spark\/testkit\/SparkScalaTestSupport.html", "kind" : "trait"}, {"name" : "cloudflow.spark.testkit.SparkStreamletTestkit", "shortDescription" : "Testkit for testing Spark streamlets.", "members_case class" : [{"label" : "run", "tail" : "(sparkStreamlet: SparkStreamlet, inletTap: SparkInletTap[_], outletTaps: Seq[SparkOutletTap[_]]): ExecutionReport", "member" : "cloudflow.spark.testkit.SparkStreamletTestkit.run", "link" : "cloudflow\/spark\/testkit\/SparkStreamletTestkit.html#run(sparkStreamlet:cloudflow.spark.SparkStreamlet,inletTap:cloudflow.spark.testkit.SparkInletTap[_],outletTaps:Seq[cloudflow.spark.testkit.SparkOutletTap[_]]):cloudflow.spark.testkit.ExecutionReport", "kind" : "def"}, {"label" : "run", "tail" : "(sparkStreamlet: SparkStreamlet, inletTaps: Seq[SparkInletTap[_]], outletTap: SparkOutletTap[_]): ExecutionReport", "member" : "cloudflow.spark.testkit.SparkStreamletTestkit.run", "link" : "cloudflow\/spark\/testkit\/SparkStreamletTestkit.html#run(sparkStreamlet:cloudflow.spark.SparkStreamlet,inletTaps:Seq[cloudflow.spark.testkit.SparkInletTap[_]],outletTap:cloudflow.spark.testkit.SparkOutletTap[_]):cloudflow.spark.testkit.ExecutionReport", "kind" : "def"}, {"label" : "run", "tail" : "(sparkStreamlet: SparkStreamlet, inletTap: SparkInletTap[_], outletTap: SparkOutletTap[_]): ExecutionReport", "member" : "cloudflow.spark.testkit.SparkStreamletTestkit.run", "link" : "cloudflow\/spark\/testkit\/SparkStreamletTestkit.html#run(sparkStreamlet:cloudflow.spark.SparkStreamlet,inletTap:cloudflow.spark.testkit.SparkInletTap[_],outletTap:cloudflow.spark.testkit.SparkOutletTap[_]):cloudflow.spark.testkit.ExecutionReport", "kind" : "def"}, {"label" : "run", "tail" : "(sparkStreamlet: SparkStreamlet, inletTaps: Seq[SparkInletTap[_]], outletTaps: Seq[SparkOutletTap[_]]): ExecutionReport", "member" : "cloudflow.spark.testkit.SparkStreamletTestkit.run", "link" : "cloudflow\/spark\/testkit\/SparkStreamletTestkit.html#run(sparkStreamlet:cloudflow.spark.SparkStreamlet,inletTaps:Seq[cloudflow.spark.testkit.SparkInletTap[_]],outletTaps:Seq[cloudflow.spark.testkit.SparkOutletTap[_]]):cloudflow.spark.testkit.ExecutionReport", "kind" : "def"}, {"label" : "outletAsTap", "tail" : "(out: CodecOutlet[Out])(arg0: Encoder[Out]): SparkOutletTap[Out]", "member" : "cloudflow.spark.testkit.SparkStreamletTestkit.outletAsTap", "link" : "cloudflow\/spark\/testkit\/SparkStreamletTestkit.html#outletAsTap[Out](out:cloudflow.streamlets.CodecOutlet[Out])(implicitevidence$4:org.apache.spark.sql.Encoder[Out]):cloudflow.spark.testkit.SparkOutletTap[Out]", "kind" : "def"}, {"label" : "inletAsTap", "tail" : "(in: CodecInlet[In])(arg0: Encoder[In]): SparkInletTap[In]", "member" : "cloudflow.spark.testkit.SparkStreamletTestkit.inletAsTap", "link" : "cloudflow\/spark\/testkit\/SparkStreamletTestkit.html#inletAsTap[In](in:cloudflow.streamlets.CodecInlet[In])(implicitevidence$3:org.apache.spark.sql.Encoder[In]):cloudflow.spark.testkit.SparkInletTap[In]", "kind" : "def"}, {"label" : "OutletTapOps", "tail" : "", "member" : "cloudflow.spark.testkit.SparkStreamletTestkit.OutletTapOps", "link" : "cloudflow\/spark\/testkit\/SparkStreamletTestkit.html#OutletTapOps[T]extendsAnyRef", "kind" : "implicit class"}, {"label" : "InletTapOps", "tail" : "", "member" : "cloudflow.spark.testkit.SparkStreamletTestkit.InletTapOps", "link" : "cloudflow\/spark\/testkit\/SparkStreamletTestkit.html#InletTapOps[T]extendsAnyRef", "kind" : "implicit class"}, {"label" : "withConfigParameterValues", "tail" : "(configParameterValues: ConfigParameterValue*): SparkStreamletTestkit", "member" : "cloudflow.spark.testkit.SparkStreamletTestkit.withConfigParameterValues", "link" : "cloudflow\/spark\/testkit\/SparkStreamletTestkit.html#withConfigParameterValues(configParameterValues:cloudflow.spark.testkit.ConfigParameterValue*):cloudflow.spark.testkit.SparkStreamletTestkit", "kind" : "def"}, {"label" : "TestStreamletName", "tail" : ": String", "member" : "cloudflow.spark.testkit.SparkStreamletTestkit.TestStreamletName", "link" : "cloudflow\/spark\/testkit\/SparkStreamletTestkit.html#TestStreamletName:String", "kind" : "val"}, {"label" : "sqlCtx", "tail" : ": SQLContext", "member" : "cloudflow.spark.testkit.SparkStreamletTestkit.sqlCtx", "link" : "cloudflow\/spark\/testkit\/SparkStreamletTestkit.html#sqlCtx:org.apache.spark.sql.SQLContext", "kind" : "implicit lazy val"}, {"member" : "cloudflow.spark.testkit.SparkStreamletTestkit#<init>", "error" : "unsupported entity"}, {"label" : "maxDuration", "tail" : ": Duration", "member" : "cloudflow.spark.testkit.SparkStreamletTestkit.maxDuration", "link" : "cloudflow\/spark\/testkit\/SparkStreamletTestkit.html#maxDuration:scala.concurrent.duration.Duration", "kind" : "val"}, {"label" : "config", "tail" : ": Config", "member" : "cloudflow.spark.testkit.SparkStreamletTestkit.config", "link" : "cloudflow\/spark\/testkit\/SparkStreamletTestkit.html#config:com.typesafe.config.Config", "kind" : "val"}, {"label" : "session", "tail" : ": SparkSession", "member" : "cloudflow.spark.testkit.SparkStreamletTestkit.session", "link" : "cloudflow\/spark\/testkit\/SparkStreamletTestkit.html#session:org.apache.spark.sql.SparkSession", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cloudflow\/spark\/testkit\/SparkStreamletTestkit.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cloudflow\/spark\/testkit\/SparkStreamletTestkit.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cloudflow\/spark\/testkit\/SparkStreamletTestkit.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cloudflow\/spark\/testkit\/SparkStreamletTestkit.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cloudflow\/spark\/testkit\/SparkStreamletTestkit.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cloudflow\/spark\/testkit\/SparkStreamletTestkit.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cloudflow\/spark\/testkit\/SparkStreamletTestkit.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cloudflow\/spark\/testkit\/SparkStreamletTestkit.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cloudflow\/spark\/testkit\/SparkStreamletTestkit.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cloudflow\/spark\/testkit\/SparkStreamletTestkit.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cloudflow\/spark\/testkit\/SparkStreamletTestkit.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cloudflow\/spark\/testkit\/SparkStreamletTestkit.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cloudflow\/spark\/testkit\/SparkStreamletTestkit.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "cloudflow\/spark\/testkit\/SparkStreamletTestkit.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cloudflow\/spark\/testkit\/SparkStreamletTestkit.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cloudflow\/spark\/testkit\/SparkStreamletTestkit.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "cloudflow\/spark\/testkit\/SparkStreamletTestkit.html", "kind" : "case class"}, {"name" : "cloudflow.spark.testkit.TestContextException", "shortDescription" : "", "members_case class" : [{"member" : "cloudflow.spark.testkit.TestContextException#<init>", "error" : "unsupported entity"}, {"label" : "msg", "tail" : ": String", "member" : "cloudflow.spark.testkit.TestContextException.msg", "link" : "cloudflow\/spark\/testkit\/TestContextException.html#msg:String", "kind" : "val"}, {"label" : "portName", "tail" : ": String", "member" : "cloudflow.spark.testkit.TestContextException.portName", "link" : "cloudflow\/spark\/testkit\/TestContextException.html#portName:String", "kind" : "val"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "cloudflow\/spark\/testkit\/TestContextException.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "cloudflow\/spark\/testkit\/TestContextException.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "cloudflow\/spark\/testkit\/TestContextException.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "cloudflow\/spark\/testkit\/TestContextException.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "cloudflow\/spark\/testkit\/TestContextException.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "cloudflow\/spark\/testkit\/TestContextException.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "cloudflow\/spark\/testkit\/TestContextException.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "cloudflow\/spark\/testkit\/TestContextException.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "cloudflow\/spark\/testkit\/TestContextException.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "cloudflow\/spark\/testkit\/TestContextException.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "cloudflow\/spark\/testkit\/TestContextException.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "cloudflow\/spark\/testkit\/TestContextException.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "cloudflow\/spark\/testkit\/TestContextException.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cloudflow\/spark\/testkit\/TestContextException.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cloudflow\/spark\/testkit\/TestContextException.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cloudflow\/spark\/testkit\/TestContextException.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cloudflow\/spark\/testkit\/TestContextException.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cloudflow\/spark\/testkit\/TestContextException.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cloudflow\/spark\/testkit\/TestContextException.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cloudflow\/spark\/testkit\/TestContextException.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cloudflow\/spark\/testkit\/TestContextException.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cloudflow\/spark\/testkit\/TestContextException.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cloudflow\/spark\/testkit\/TestContextException.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cloudflow\/spark\/testkit\/TestContextException.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cloudflow\/spark\/testkit\/TestContextException.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cloudflow\/spark\/testkit\/TestContextException.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "cloudflow\/spark\/testkit\/TestContextException.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cloudflow\/spark\/testkit\/TestContextException.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cloudflow\/spark\/testkit\/TestContextException.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "cloudflow\/spark\/testkit\/TestContextException.html", "kind" : "case class"}, {"name" : "cloudflow.spark.testkit.TestSparkStreamletContext", "shortDescription" : "An implementation of SparkCtx for unit testing.", "members_class" : [{"label" : "MountedPathUnavailableException", "tail" : "", "member" : "cloudflow.streamlets.StreamletContext.MountedPathUnavailableException", "link" : "cloudflow\/spark\/testkit\/TestSparkStreamletContext.html#MountedPathUnavailableExceptionextendsExceptionwithProductwithSerializable", "kind" : "case class"}, {"label" : "checkpointDir", "tail" : "(dirName: String): String", "member" : "cloudflow.spark.testkit.TestSparkStreamletContext.checkpointDir", "link" : "cloudflow\/spark\/testkit\/TestSparkStreamletContext.html#checkpointDir(dirName:String):String", "kind" : "def"}, {"label" : "writeStream", "tail" : "(stream: Dataset[Out], outPort: CodecOutlet[Out], outputMode: OutputMode, optionalTrigger: Option[Trigger])(encoder: Encoder[Out], typeTag: scala.reflect.api.JavaUniverse.TypeTag[Out]): StreamingQuery", "member" : "cloudflow.spark.testkit.TestSparkStreamletContext.writeStream", "link" : "cloudflow\/spark\/testkit\/TestSparkStreamletContext.html#writeStream[Out](stream:org.apache.spark.sql.Dataset[Out],outPort:cloudflow.streamlets.CodecOutlet[Out],outputMode:org.apache.spark.sql.streaming.OutputMode,optionalTrigger:Option[org.apache.spark.sql.streaming.Trigger])(implicitencoder:org.apache.spark.sql.Encoder[Out],implicittypeTag:reflect.runtime.universe.TypeTag[Out]):org.apache.spark.sql.streaming.StreamingQuery", "kind" : "def"}, {"label" : "readStream", "tail" : "(inPort: CodecInlet[In])(encoder: Encoder[In], typeTag: scala.reflect.api.JavaUniverse.TypeTag[In]): Dataset[In]", "member" : "cloudflow.spark.testkit.TestSparkStreamletContext.readStream", "link" : "cloudflow\/spark\/testkit\/TestSparkStreamletContext.html#readStream[In](inPort:cloudflow.streamlets.CodecInlet[In])(implicitencoder:org.apache.spark.sql.Encoder[In],implicittypeTag:reflect.runtime.universe.TypeTag[In]):org.apache.spark.sql.Dataset[In]", "kind" : "def"}, {"label" : "ProcessingTimeInterval", "tail" : ": FiniteDuration", "member" : "cloudflow.spark.testkit.TestSparkStreamletContext.ProcessingTimeInterval", "link" : "cloudflow\/spark\/testkit\/TestSparkStreamletContext.html#ProcessingTimeInterval:scala.concurrent.duration.FiniteDuration", "kind" : "val"}, {"member" : "cloudflow.spark.testkit.TestSparkStreamletContext#<init>", "error" : "unsupported entity"}, {"label" : "config", "tail" : ": Config", "member" : "cloudflow.spark.testkit.TestSparkStreamletContext.config", "link" : "cloudflow\/spark\/testkit\/TestSparkStreamletContext.html#config:com.typesafe.config.Config", "kind" : "val"}, {"label" : "streamletRef", "tail" : ": String", "member" : "cloudflow.spark.testkit.TestSparkStreamletContext.streamletRef", "link" : "cloudflow\/spark\/testkit\/TestSparkStreamletContext.html#streamletRef:String", "kind" : "val"}, {"label" : "session", "tail" : ": SparkSession", "member" : "cloudflow.spark.SparkStreamletContext.session", "link" : "cloudflow\/spark\/testkit\/TestSparkStreamletContext.html#session:org.apache.spark.sql.SparkSession", "kind" : "val"}, {"label" : "getMountedPath", "tail" : "(volumeMount: VolumeMount): Path", "member" : "cloudflow.streamlets.StreamletContext.getMountedPath", "link" : "cloudflow\/spark\/testkit\/TestSparkStreamletContext.html#getMountedPath(volumeMount:cloudflow.streamlets.VolumeMount):java.nio.file.Path", "kind" : "def"}, {"label" : "streamletConfig", "tail" : "(): Config", "member" : "cloudflow.streamlets.StreamletContext.streamletConfig", "link" : "cloudflow\/spark\/testkit\/TestSparkStreamletContext.html#streamletConfig:com.typesafe.config.Config", "kind" : "final def"}, {"label" : "runtimeBootstrapServers", "tail" : "(topic: Topic): String", "member" : "cloudflow.streamlets.StreamletContext.runtimeBootstrapServers", "link" : "cloudflow\/spark\/testkit\/TestSparkStreamletContext.html#runtimeBootstrapServers(topic:cloudflow.streamlets.Topic):String", "kind" : "def"}, {"label" : "findTopicForPort", "tail" : "(port: StreamletPort): Topic", "member" : "cloudflow.streamlets.StreamletContext.findTopicForPort", "link" : "cloudflow\/spark\/testkit\/TestSparkStreamletContext.html#findTopicForPort(port:cloudflow.streamlets.StreamletPort):cloudflow.streamlets.Topic", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cloudflow\/spark\/testkit\/TestSparkStreamletContext.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cloudflow\/spark\/testkit\/TestSparkStreamletContext.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cloudflow\/spark\/testkit\/TestSparkStreamletContext.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cloudflow\/spark\/testkit\/TestSparkStreamletContext.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cloudflow\/spark\/testkit\/TestSparkStreamletContext.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cloudflow\/spark\/testkit\/TestSparkStreamletContext.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cloudflow\/spark\/testkit\/TestSparkStreamletContext.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cloudflow\/spark\/testkit\/TestSparkStreamletContext.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cloudflow\/spark\/testkit\/TestSparkStreamletContext.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cloudflow\/spark\/testkit\/TestSparkStreamletContext.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cloudflow\/spark\/testkit\/TestSparkStreamletContext.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cloudflow\/spark\/testkit\/TestSparkStreamletContext.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cloudflow\/spark\/testkit\/TestSparkStreamletContext.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "cloudflow\/spark\/testkit\/TestSparkStreamletContext.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cloudflow\/spark\/testkit\/TestSparkStreamletContext.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cloudflow\/spark\/testkit\/TestSparkStreamletContext.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "cloudflow\/spark\/testkit\/TestSparkStreamletContext.html", "kind" : "class"}], "cloudflow.spark" : [{"name" : "cloudflow.spark.SparkStreamlet", "members_trait" : [{"label" : "applicationName", "tail" : ": String", "member" : "cloudflow.spark.SparkStreamlet.applicationName", "link" : "cloudflow\/spark\/SparkStreamlet.html#applicationName:String", "kind" : "val"}, {"label" : "updateSparkSession", "tail" : "(session: SparkSession): SparkSession", "member" : "cloudflow.spark.SparkStreamlet.updateSparkSession", "link" : "cloudflow\/spark\/SparkStreamlet.html#updateSparkSession(session:org.apache.spark.sql.SparkSession):org.apache.spark.sql.SparkSession", "kind" : "def"}, {"label" : "configuredValue", "tail" : "(context: SparkStreamletContext, configKey: String): String", "member" : "cloudflow.spark.SparkStreamlet.configuredValue", "link" : "cloudflow\/spark\/SparkStreamlet.html#configuredValue(context:cloudflow.spark.SparkStreamletContext,configKey:String):String", "kind" : "final def"}, {"label" : "logStartRunnerMessage", "tail" : "(buildInfo: String): Unit", "member" : "cloudflow.spark.SparkStreamlet.logStartRunnerMessage", "link" : "cloudflow\/spark\/SparkStreamlet.html#logStartRunnerMessage(buildInfo:String):Unit", "kind" : "def"}, {"label" : "run", "tail" : "(context: SparkStreamletContext): StreamletExecution", "member" : "cloudflow.spark.SparkStreamlet.run", "link" : "cloudflow\/spark\/SparkStreamlet.html#run(context:cloudflow.spark.SparkStreamletContext):cloudflow.streamlets.StreamletExecution", "kind" : "final def"}, {"label" : "createContext", "tail" : "(config: Config): SparkStreamletContext", "member" : "cloudflow.spark.SparkStreamlet.createContext", "link" : "cloudflow\/spark\/SparkStreamlet.html#createContext(config:com.typesafe.config.Config):cloudflow.spark.SparkStreamletContext", "kind" : "final def"}, {"label" : "StopTimeout", "tail" : ": FiniteDuration", "member" : "cloudflow.spark.SparkStreamlet.StopTimeout", "link" : "cloudflow\/spark\/SparkStreamlet.html#StopTimeout:scala.concurrent.duration.FiniteDuration", "kind" : "val"}, {"label" : "runtime", "tail" : ": SparkStreamletRuntime.type", "member" : "cloudflow.spark.SparkStreamlet.runtime", "link" : "cloudflow\/spark\/SparkStreamlet.html#runtime:cloudflow.spark.SparkStreamletRuntime.type", "kind" : "final val"}, {"label" : "jsonDescriptor", "tail" : "(): String", "member" : "cloudflow.streamlets.Streamlet.jsonDescriptor", "link" : "cloudflow\/spark\/SparkStreamlet.html#jsonDescriptor:String", "kind" : "final def"}, {"label" : "defineVolumeMounts", "tail" : "(): Array[VolumeMount]", "member" : "cloudflow.streamlets.Streamlet.defineVolumeMounts", "link" : "cloudflow\/spark\/SparkStreamlet.html#defineVolumeMounts():Array[cloudflow.streamlets.VolumeMount]", "kind" : "def"}, {"label" : "volumeMounts", "tail" : "(): IndexedSeq[VolumeMount]", "member" : "cloudflow.streamlets.Streamlet.volumeMounts", "link" : "cloudflow\/spark\/SparkStreamlet.html#volumeMounts:scala.collection.immutable.IndexedSeq[cloudflow.streamlets.VolumeMount]", "kind" : "def"}, {"label" : "defineCustomAttributes", "tail" : "(): Array[StreamletAttribute]", "member" : "cloudflow.streamlets.Streamlet.defineCustomAttributes", "link" : "cloudflow\/spark\/SparkStreamlet.html#defineCustomAttributes():Array[cloudflow.streamlets.StreamletAttribute]", "kind" : "def"}, {"label" : "customAttributes", "tail" : "(): Set[StreamletAttribute]", "member" : "cloudflow.streamlets.Streamlet.customAttributes", "link" : "cloudflow\/spark\/SparkStreamlet.html#customAttributes:scala.collection.immutable.Set[cloudflow.streamlets.StreamletAttribute]", "kind" : "def"}, {"label" : "attributes", "tail" : "(): Set[StreamletAttribute]", "member" : "cloudflow.streamlets.Streamlet.attributes", "link" : "cloudflow\/spark\/SparkStreamlet.html#attributes:scala.collection.immutable.Set[cloudflow.streamlets.StreamletAttribute]", "kind" : "def"}, {"label" : "defineConfigParameters", "tail" : "(): Array[ConfigParameter]", "member" : "cloudflow.streamlets.Streamlet.defineConfigParameters", "link" : "cloudflow\/spark\/SparkStreamlet.html#defineConfigParameters():Array[cloudflow.streamlets.ConfigParameter]", "kind" : "def"}, {"label" : "configParameters", "tail" : "(): IndexedSeq[ConfigParameter]", "member" : "cloudflow.streamlets.Streamlet.configParameters", "link" : "cloudflow\/spark\/SparkStreamlet.html#configParameters:scala.collection.immutable.IndexedSeq[cloudflow.streamlets.ConfigParameter]", "kind" : "def"}, {"label" : "description", "tail" : "(): String", "member" : "cloudflow.streamlets.Streamlet.description", "link" : "cloudflow\/spark\/SparkStreamlet.html#description:String", "kind" : "def"}, {"label" : "labels", "tail" : "(): IndexedSeq[String]", "member" : "cloudflow.streamlets.Streamlet.labels", "link" : "cloudflow\/spark\/SparkStreamlet.html#labels:scala.collection.immutable.IndexedSeq[String]", "kind" : "def"}, {"label" : "outlets", "tail" : "(): IndexedSeq[Outlet]", "member" : "cloudflow.streamlets.Streamlet.outlets", "link" : "cloudflow\/spark\/SparkStreamlet.html#outlets:scala.collection.immutable.IndexedSeq[cloudflow.streamlets.Outlet]", "kind" : "final def"}, {"label" : "inlets", "tail" : "(): IndexedSeq[Inlet]", "member" : "cloudflow.streamlets.Streamlet.inlets", "link" : "cloudflow\/spark\/SparkStreamlet.html#inlets:scala.collection.immutable.IndexedSeq[cloudflow.streamlets.Inlet]", "kind" : "final def"}, {"label" : "getContext", "tail" : "(): SparkStreamletContext", "member" : "cloudflow.streamlets.Streamlet.getContext", "link" : "cloudflow\/spark\/SparkStreamlet.html#getContext():Context", "kind" : "final def"}, {"label" : "context", "tail" : "(): SparkStreamletContext", "member" : "cloudflow.streamlets.Streamlet.context", "link" : "cloudflow\/spark\/SparkStreamlet.html#context:Context", "kind" : "implicit final def"}, {"label" : "log", "tail" : ": Logger", "member" : "cloudflow.streamlets.Streamlet.log", "link" : "cloudflow\/spark\/SparkStreamlet.html#log:org.slf4j.Logger", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cloudflow\/spark\/SparkStreamlet.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cloudflow\/spark\/SparkStreamlet.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cloudflow\/spark\/SparkStreamlet.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cloudflow\/spark\/SparkStreamlet.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cloudflow\/spark\/SparkStreamlet.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cloudflow\/spark\/SparkStreamlet.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cloudflow\/spark\/SparkStreamlet.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cloudflow\/spark\/SparkStreamlet.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cloudflow\/spark\/SparkStreamlet.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cloudflow\/spark\/SparkStreamlet.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cloudflow\/spark\/SparkStreamlet.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cloudflow\/spark\/SparkStreamlet.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cloudflow\/spark\/SparkStreamlet.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cloudflow\/spark\/SparkStreamlet.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "cloudflow\/spark\/SparkStreamlet.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cloudflow\/spark\/SparkStreamlet.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "cloudflow\/spark\/SparkStreamlet.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cloudflow\/spark\/SparkStreamlet.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cloudflow\/spark\/SparkStreamlet.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "createLogic", "tail" : "(): SparkStreamletLogic", "member" : "cloudflow.spark.SparkStreamlet.createLogic", "link" : "cloudflow\/spark\/SparkStreamlet.html#createLogic():cloudflow.spark.SparkStreamletLogic", "kind" : "abstract def"}, {"label" : "shape", "tail" : "(): StreamletShape", "member" : "cloudflow.streamlets.Streamlet.shape", "link" : "cloudflow\/spark\/SparkStreamlet.html#shape():cloudflow.streamlets.StreamletShape", "kind" : "abstract def"}], "shortDescription" : "The base class for defining Spark streamlets.", "trait" : "cloudflow\/spark\/SparkStreamlet.html", "kind" : "trait"}, {"name" : "cloudflow.spark.SparkStreamletContext", "shortDescription" : "", "members_case class" : [{"label" : "MountedPathUnavailableException", "tail" : "", "member" : "cloudflow.streamlets.StreamletContext.MountedPathUnavailableException", "link" : "cloudflow\/spark\/SparkStreamletContext.html#MountedPathUnavailableExceptionextendsExceptionwithProductwithSerializable", "kind" : "case class"}, {"member" : "cloudflow.spark.SparkStreamletContext#<init>", "error" : "unsupported entity"}, {"label" : "session", "tail" : ": SparkSession", "member" : "cloudflow.spark.SparkStreamletContext.session", "link" : "cloudflow\/spark\/SparkStreamletContext.html#session:org.apache.spark.sql.SparkSession", "kind" : "val"}, {"label" : "getMountedPath", "tail" : "(volumeMount: VolumeMount): Path", "member" : "cloudflow.streamlets.StreamletContext.getMountedPath", "link" : "cloudflow\/spark\/SparkStreamletContext.html#getMountedPath(volumeMount:cloudflow.streamlets.VolumeMount):java.nio.file.Path", "kind" : "def"}, {"label" : "streamletConfig", "tail" : "(): Config", "member" : "cloudflow.streamlets.StreamletContext.streamletConfig", "link" : "cloudflow\/spark\/SparkStreamletContext.html#streamletConfig:com.typesafe.config.Config", "kind" : "final def"}, {"label" : "runtimeBootstrapServers", "tail" : "(topic: Topic): String", "member" : "cloudflow.streamlets.StreamletContext.runtimeBootstrapServers", "link" : "cloudflow\/spark\/SparkStreamletContext.html#runtimeBootstrapServers(topic:cloudflow.streamlets.Topic):String", "kind" : "def"}, {"label" : "config", "tail" : "(): Config", "member" : "cloudflow.streamlets.StreamletContext.config", "link" : "cloudflow\/spark\/SparkStreamletContext.html#config:com.typesafe.config.Config", "kind" : "def"}, {"label" : "findTopicForPort", "tail" : "(port: StreamletPort): Topic", "member" : "cloudflow.streamlets.StreamletContext.findTopicForPort", "link" : "cloudflow\/spark\/SparkStreamletContext.html#findTopicForPort(port:cloudflow.streamlets.StreamletPort):cloudflow.streamlets.Topic", "kind" : "def"}, {"label" : "streamletRef", "tail" : "(): String", "member" : "cloudflow.streamlets.StreamletContext.streamletRef", "link" : "cloudflow\/spark\/SparkStreamletContext.html#streamletRef:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cloudflow\/spark\/SparkStreamletContext.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cloudflow\/spark\/SparkStreamletContext.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cloudflow\/spark\/SparkStreamletContext.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cloudflow\/spark\/SparkStreamletContext.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cloudflow\/spark\/SparkStreamletContext.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cloudflow\/spark\/SparkStreamletContext.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cloudflow\/spark\/SparkStreamletContext.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cloudflow\/spark\/SparkStreamletContext.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cloudflow\/spark\/SparkStreamletContext.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cloudflow\/spark\/SparkStreamletContext.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cloudflow\/spark\/SparkStreamletContext.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cloudflow\/spark\/SparkStreamletContext.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cloudflow\/spark\/SparkStreamletContext.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "cloudflow\/spark\/SparkStreamletContext.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cloudflow\/spark\/SparkStreamletContext.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cloudflow\/spark\/SparkStreamletContext.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "writeStream", "tail" : "(stream: Dataset[Out], outPort: CodecOutlet[Out], outputMode: OutputMode, trigger: Option[Trigger])(encoder: Encoder[Out], typeTag: scala.reflect.api.JavaUniverse.TypeTag[Out]): StreamingQuery", "member" : "cloudflow.spark.SparkStreamletContext.writeStream", "link" : "cloudflow\/spark\/SparkStreamletContext.html#writeStream[Out](stream:org.apache.spark.sql.Dataset[Out],outPort:cloudflow.streamlets.CodecOutlet[Out],outputMode:org.apache.spark.sql.streaming.OutputMode,trigger:Option[org.apache.spark.sql.streaming.Trigger])(implicitencoder:org.apache.spark.sql.Encoder[Out],implicittypeTag:reflect.runtime.universe.TypeTag[Out]):org.apache.spark.sql.streaming.StreamingQuery", "kind" : "abstract def"}, {"label" : "readStream", "tail" : "(inPort: CodecInlet[In])(encoder: Encoder[In], typeTag: scala.reflect.api.JavaUniverse.TypeTag[In]): Dataset[In]", "member" : "cloudflow.spark.SparkStreamletContext.readStream", "link" : "cloudflow\/spark\/SparkStreamletContext.html#readStream[In](inPort:cloudflow.streamlets.CodecInlet[In])(implicitencoder:org.apache.spark.sql.Encoder[In],implicittypeTag:reflect.runtime.universe.TypeTag[In]):org.apache.spark.sql.Dataset[In]", "kind" : "abstract def"}, {"label" : "checkpointDir", "tail" : "(dirName: String): String", "member" : "cloudflow.spark.SparkStreamletContext.checkpointDir", "link" : "cloudflow\/spark\/SparkStreamletContext.html#checkpointDir(dirName:String):String", "kind" : "abstract def"}], "case class" : "cloudflow\/spark\/SparkStreamletContext.html", "kind" : "case class"}, {"name" : "cloudflow.spark.SparkStreamletLogic", "shortDescription" : "Provides an entry-point for defining the behavior of a SparkStreamlet.", "members_class" : [{"label" : "getMountedPath", "tail" : "(volumeMount: VolumeMount): Path", "member" : "cloudflow.spark.SparkStreamletLogic.getMountedPath", "link" : "cloudflow\/spark\/SparkStreamletLogic.html#getMountedPath(volumeMount:cloudflow.streamlets.VolumeMount):java.nio.file.Path", "kind" : "final def"}, {"label" : "streamletRef", "tail" : "(): String", "member" : "cloudflow.spark.SparkStreamletLogic.streamletRef", "link" : "cloudflow\/spark\/SparkStreamletLogic.html#streamletRef:String", "kind" : "final def"}, {"label" : "session", "tail" : "(): SparkSession", "member" : "cloudflow.spark.SparkStreamletLogic.session", "link" : "cloudflow\/spark\/SparkStreamletLogic.html#session:org.apache.spark.sql.SparkSession", "kind" : "final def"}, {"label" : "config", "tail" : "(): Config", "member" : "cloudflow.spark.SparkStreamletLogic.config", "link" : "cloudflow\/spark\/SparkStreamletLogic.html#config:com.typesafe.config.Config", "kind" : "final def"}, {"label" : "writeStream", "tail" : "(stream: Dataset[Out], outPort: CodecOutlet[Out], outputMode: OutputMode, optionalTrigger: Option[Trigger])(encoder: Encoder[Out], typeTag: scala.reflect.api.JavaUniverse.TypeTag[Out]): StreamingQuery", "member" : "cloudflow.spark.SparkStreamletLogic.writeStream", "link" : "cloudflow\/spark\/SparkStreamletLogic.html#writeStream[Out](stream:org.apache.spark.sql.Dataset[Out],outPort:cloudflow.streamlets.CodecOutlet[Out],outputMode:org.apache.spark.sql.streaming.OutputMode,optionalTrigger:Option[org.apache.spark.sql.streaming.Trigger])(implicitencoder:org.apache.spark.sql.Encoder[Out],implicittypeTag:reflect.runtime.universe.TypeTag[Out]):org.apache.spark.sql.streaming.StreamingQuery", "kind" : "final def"}, {"label" : "readStream", "tail" : "(inPort: CodecInlet[In])(encoder: Encoder[In], typeTag: scala.reflect.api.JavaUniverse.TypeTag[In]): Dataset[In]", "member" : "cloudflow.spark.SparkStreamletLogic.readStream", "link" : "cloudflow\/spark\/SparkStreamletLogic.html#readStream[In](inPort:cloudflow.streamlets.CodecInlet[In])(implicitencoder:org.apache.spark.sql.Encoder[In],implicittypeTag:reflect.runtime.universe.TypeTag[In]):org.apache.spark.sql.Dataset[In]", "kind" : "final def"}, {"label" : "StreamingQueryExtensions", "tail" : "", "member" : "cloudflow.spark.SparkStreamletLogic.StreamingQueryExtensions", "link" : "cloudflow\/spark\/SparkStreamletLogic.html#StreamingQueryExtensionsextendsAnyRef", "kind" : "implicit class"}, {"label" : "getContext", "tail" : "(): SparkStreamletContext", "member" : "cloudflow.spark.SparkStreamletLogic.getContext", "link" : "cloudflow\/spark\/SparkStreamletLogic.html#getContext():cloudflow.spark.SparkStreamletContext", "kind" : "def"}, {"member" : "cloudflow.spark.SparkStreamletLogic#<init>", "error" : "unsupported entity"}, {"label" : "context", "tail" : ": SparkStreamletContext", "member" : "cloudflow.spark.SparkStreamletLogic.context", "link" : "cloudflow\/spark\/SparkStreamletLogic.html#context:cloudflow.spark.SparkStreamletContext", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cloudflow\/spark\/SparkStreamletLogic.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cloudflow\/spark\/SparkStreamletLogic.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cloudflow\/spark\/SparkStreamletLogic.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cloudflow\/spark\/SparkStreamletLogic.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cloudflow\/spark\/SparkStreamletLogic.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cloudflow\/spark\/SparkStreamletLogic.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cloudflow\/spark\/SparkStreamletLogic.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cloudflow\/spark\/SparkStreamletLogic.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cloudflow\/spark\/SparkStreamletLogic.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cloudflow\/spark\/SparkStreamletLogic.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cloudflow\/spark\/SparkStreamletLogic.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cloudflow\/spark\/SparkStreamletLogic.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cloudflow\/spark\/SparkStreamletLogic.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cloudflow\/spark\/SparkStreamletLogic.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "cloudflow\/spark\/SparkStreamletLogic.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cloudflow\/spark\/SparkStreamletLogic.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "cloudflow\/spark\/SparkStreamletLogic.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cloudflow\/spark\/SparkStreamletLogic.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cloudflow\/spark\/SparkStreamletLogic.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "buildStreamingQueries", "tail" : "(): StreamletQueryExecution", "member" : "cloudflow.spark.SparkStreamletLogic.buildStreamingQueries", "link" : "cloudflow\/spark\/SparkStreamletLogic.html#buildStreamingQueries:cloudflow.spark.StreamletQueryExecution", "kind" : "abstract def"}], "class" : "cloudflow\/spark\/SparkStreamletLogic.html", "kind" : "class"}, {"name" : "cloudflow.spark.SparkStreamletRuntime", "shortDescription" : "", "object" : "cloudflow\/spark\/SparkStreamletRuntime$.html", "members_object" : [{"label" : "name", "tail" : ": String", "member" : "cloudflow.spark.SparkStreamletRuntime.name", "link" : "cloudflow\/spark\/SparkStreamletRuntime$.html#name:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cloudflow\/spark\/SparkStreamletRuntime$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cloudflow\/spark\/SparkStreamletRuntime$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cloudflow\/spark\/SparkStreamletRuntime$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cloudflow\/spark\/SparkStreamletRuntime$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cloudflow\/spark\/SparkStreamletRuntime$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cloudflow\/spark\/SparkStreamletRuntime$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cloudflow\/spark\/SparkStreamletRuntime$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cloudflow\/spark\/SparkStreamletRuntime$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cloudflow\/spark\/SparkStreamletRuntime$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cloudflow\/spark\/SparkStreamletRuntime$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cloudflow\/spark\/SparkStreamletRuntime$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cloudflow\/spark\/SparkStreamletRuntime$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cloudflow\/spark\/SparkStreamletRuntime$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "cloudflow\/spark\/SparkStreamletRuntime$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "cloudflow\/spark\/SparkStreamletRuntime$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cloudflow\/spark\/SparkStreamletRuntime$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cloudflow\/spark\/SparkStreamletRuntime$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "cloudflow.spark.StreamletQueryExecution", "shortDescription" : "", "object" : "cloudflow\/spark\/StreamletQueryExecution$.html", "members_object" : [{"label" : "apply", "tail" : "(querySeq: Seq[StreamingQuery]): StreamletQueryExecution", "member" : "cloudflow.spark.StreamletQueryExecution.apply", "link" : "cloudflow\/spark\/StreamletQueryExecution$.html#apply(querySeq:Seq[org.apache.spark.sql.streaming.StreamingQuery]):cloudflow.spark.StreamletQueryExecution", "kind" : "def"}, {"label" : "apply", "tail" : "(oneQuery: StreamingQuery, moreQueries: StreamingQuery*): StreamletQueryExecution", "member" : "cloudflow.spark.StreamletQueryExecution.apply", "link" : "cloudflow\/spark\/StreamletQueryExecution$.html#apply(oneQuery:org.apache.spark.sql.streaming.StreamingQuery,moreQueries:org.apache.spark.sql.streaming.StreamingQuery*):cloudflow.spark.StreamletQueryExecution", "kind" : "def"}, {"label" : "apply", "tail" : "(singleQuery: StreamingQuery): StreamletQueryExecution", "member" : "cloudflow.spark.StreamletQueryExecution.apply", "link" : "cloudflow\/spark\/StreamletQueryExecution$.html#apply(singleQuery:org.apache.spark.sql.streaming.StreamingQuery):cloudflow.spark.StreamletQueryExecution", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cloudflow\/spark\/StreamletQueryExecution$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cloudflow\/spark\/StreamletQueryExecution$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cloudflow\/spark\/StreamletQueryExecution$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cloudflow\/spark\/StreamletQueryExecution$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cloudflow\/spark\/StreamletQueryExecution$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cloudflow\/spark\/StreamletQueryExecution$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cloudflow\/spark\/StreamletQueryExecution$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cloudflow\/spark\/StreamletQueryExecution$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cloudflow\/spark\/StreamletQueryExecution$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cloudflow\/spark\/StreamletQueryExecution$.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cloudflow\/spark\/StreamletQueryExecution$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cloudflow\/spark\/StreamletQueryExecution$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "cloudflow\/spark\/StreamletQueryExecution$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cloudflow\/spark\/StreamletQueryExecution$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "cloudflow\/spark\/StreamletQueryExecution$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "cloudflow\/spark\/StreamletQueryExecution$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "cloudflow\/spark\/StreamletQueryExecution$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cloudflow\/spark\/StreamletQueryExecution$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cloudflow\/spark\/StreamletQueryExecution$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "stop", "tail" : "(): Unit", "member" : "cloudflow.spark.StreamletQueryExecution.stop", "link" : "cloudflow\/spark\/StreamletQueryExecution.html#stop():Unit", "kind" : "final def"}, {"member" : "cloudflow.spark.StreamletQueryExecution#<init>", "error" : "unsupported entity"}, {"label" : "queries", "tail" : ": Vector[StreamingQuery]", "member" : "cloudflow.spark.StreamletQueryExecution.queries", "link" : "cloudflow\/spark\/StreamletQueryExecution.html#queries:Vector[org.apache.spark.sql.streaming.StreamingQuery]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "cloudflow\/spark\/StreamletQueryExecution.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "cloudflow\/spark\/StreamletQueryExecution.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "cloudflow\/spark\/StreamletQueryExecution.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "cloudflow\/spark\/StreamletQueryExecution.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "cloudflow\/spark\/StreamletQueryExecution.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "cloudflow\/spark\/StreamletQueryExecution.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "cloudflow\/spark\/StreamletQueryExecution.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "cloudflow\/spark\/StreamletQueryExecution.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "cloudflow\/spark\/StreamletQueryExecution.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "cloudflow\/spark\/StreamletQueryExecution.html#wait():Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "cloudflow\/spark\/StreamletQueryExecution.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "cloudflow\/spark\/StreamletQueryExecution.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "cloudflow\/spark\/StreamletQueryExecution.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "cloudflow\/spark\/StreamletQueryExecution.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "cloudflow\/spark\/StreamletQueryExecution.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "cloudflow\/spark\/StreamletQueryExecution.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "cloudflow\/spark\/StreamletQueryExecution.html", "kind" : "case class"}]};